{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5f4b841a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import \"classic\" libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#Import \"specific\" libraries\n",
    "\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.tsa.statespace.sarimax import SARIMAX\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "from statsmodels.tsa.stattools import adfuller\n",
    "\n",
    "import math\n",
    "from math import sqrt\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5b95c784",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import datasets\n",
    "\n",
    "df_classification = pd.read_csv('IT_Company_System_Issues_Classification.csv')\n",
    "df_time_series = pd.read_csv('IT_Company_Time_Series.csv')\n",
    "df_retail_list = pd.read_csv('IT_Retail_List.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b136d43",
   "metadata": {},
   "source": [
    "# Data Exploring and Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "da0fb73f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Issue_ID</th>\n",
       "      <th>Issue_Type</th>\n",
       "      <th>System_Component</th>\n",
       "      <th>Customer_Impact</th>\n",
       "      <th>Time_to_Resolve_hrs</th>\n",
       "      <th>Reported_By</th>\n",
       "      <th>Priority</th>\n",
       "      <th>Previous_Occurrences</th>\n",
       "      <th>Issue_Reported_Month</th>\n",
       "      <th>Resolved</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>8544</td>\n",
       "      <td>Hardware</td>\n",
       "      <td>Component_D</td>\n",
       "      <td>High</td>\n",
       "      <td>43.117583</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>2</td>\n",
       "      <td>Jul</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6569</td>\n",
       "      <td>Server</td>\n",
       "      <td>Component_B</td>\n",
       "      <td>Low</td>\n",
       "      <td>71.695013</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Low</td>\n",
       "      <td>6</td>\n",
       "      <td>May</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>3990</td>\n",
       "      <td>Server</td>\n",
       "      <td>Component_D</td>\n",
       "      <td>Medium</td>\n",
       "      <td>31.621253</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4</td>\n",
       "      <td>Mar</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3504</td>\n",
       "      <td>Server</td>\n",
       "      <td>Component_C</td>\n",
       "      <td>Low</td>\n",
       "      <td>66.329435</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>0</td>\n",
       "      <td>Sep</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1587</td>\n",
       "      <td>Server</td>\n",
       "      <td>Component_D</td>\n",
       "      <td>Medium</td>\n",
       "      <td>25.168704</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2</td>\n",
       "      <td>Jun</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>995</td>\n",
       "      <td>8162</td>\n",
       "      <td>Network</td>\n",
       "      <td>Component_C</td>\n",
       "      <td>Medium</td>\n",
       "      <td>69.735378</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>0</td>\n",
       "      <td>Mar</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>996</td>\n",
       "      <td>7241</td>\n",
       "      <td>Hardware</td>\n",
       "      <td>Component_D</td>\n",
       "      <td>High</td>\n",
       "      <td>32.881160</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Medium</td>\n",
       "      <td>1</td>\n",
       "      <td>Jan</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>997</td>\n",
       "      <td>9399</td>\n",
       "      <td>Server</td>\n",
       "      <td>Component_A</td>\n",
       "      <td>Low</td>\n",
       "      <td>68.118630</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7</td>\n",
       "      <td>Feb</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>998</td>\n",
       "      <td>6633</td>\n",
       "      <td>Server</td>\n",
       "      <td>Component_C</td>\n",
       "      <td>Medium</td>\n",
       "      <td>48.892633</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Urgent</td>\n",
       "      <td>8</td>\n",
       "      <td>May</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>999</td>\n",
       "      <td>6755</td>\n",
       "      <td>Hardware</td>\n",
       "      <td>Component_C</td>\n",
       "      <td>Medium</td>\n",
       "      <td>22.063461</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>1</td>\n",
       "      <td>Oct</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  Issue_ID Issue_Type System_Component Customer_Impact  \\\n",
       "0             0      8544   Hardware      Component_D            High   \n",
       "1             1      6569     Server      Component_B             Low   \n",
       "2             2      3990     Server      Component_D          Medium   \n",
       "3             3      3504     Server      Component_C             Low   \n",
       "4             4      1587     Server      Component_D          Medium   \n",
       "..          ...       ...        ...              ...             ...   \n",
       "995         995      8162    Network      Component_C          Medium   \n",
       "996         996      7241   Hardware      Component_D            High   \n",
       "997         997      9399     Server      Component_A             Low   \n",
       "998         998      6633     Server      Component_C          Medium   \n",
       "999         999      6755   Hardware      Component_C          Medium   \n",
       "\n",
       "     Time_to_Resolve_hrs       Reported_By Priority  Previous_Occurrences  \\\n",
       "0              43.117583  Automated_System     High                     2   \n",
       "1              71.695013          Customer      Low                     6   \n",
       "2              31.621253  Automated_System   Medium                     4   \n",
       "3              66.329435  Automated_System   Medium                     0   \n",
       "4              25.168704  Automated_System   Medium                     2   \n",
       "..                   ...               ...      ...                   ...   \n",
       "995            69.735378  Automated_System     High                     0   \n",
       "996            32.881160          Customer   Medium                     1   \n",
       "997            68.118630          Customer   Medium                     7   \n",
       "998            48.892633          Customer   Urgent                     8   \n",
       "999            22.063461  Automated_System     High                     1   \n",
       "\n",
       "    Issue_Reported_Month  Resolved  \n",
       "0                    Jul      True  \n",
       "1                    May     False  \n",
       "2                    Mar     False  \n",
       "3                    Sep      True  \n",
       "4                    Jun     False  \n",
       "..                   ...       ...  \n",
       "995                  Mar     False  \n",
       "996                  Jan     False  \n",
       "997                  Feb     False  \n",
       "998                  May      True  \n",
       "999                  Oct      True  \n",
       "\n",
       "[1000 rows x 11 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ba7351d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Software_1</th>\n",
       "      <th>Software_2</th>\n",
       "      <th>Software_3</th>\n",
       "      <th>Software_4</th>\n",
       "      <th>Software_5</th>\n",
       "      <th>Software_6</th>\n",
       "      <th>Software_7</th>\n",
       "      <th>Software_8</th>\n",
       "      <th>Software_9</th>\n",
       "      <th>Software_10</th>\n",
       "      <th>Software_11</th>\n",
       "      <th>Software_12</th>\n",
       "      <th>Software_13</th>\n",
       "      <th>Software_14</th>\n",
       "      <th>Software_15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-31</td>\n",
       "      <td>104</td>\n",
       "      <td>97</td>\n",
       "      <td>63</td>\n",
       "      <td>72</td>\n",
       "      <td>50</td>\n",
       "      <td>95</td>\n",
       "      <td>101</td>\n",
       "      <td>63</td>\n",
       "      <td>134</td>\n",
       "      <td>101</td>\n",
       "      <td>72</td>\n",
       "      <td>134</td>\n",
       "      <td>118</td>\n",
       "      <td>95</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-02-28</td>\n",
       "      <td>89</td>\n",
       "      <td>128</td>\n",
       "      <td>61</td>\n",
       "      <td>95</td>\n",
       "      <td>52</td>\n",
       "      <td>97</td>\n",
       "      <td>113</td>\n",
       "      <td>73</td>\n",
       "      <td>144</td>\n",
       "      <td>117</td>\n",
       "      <td>68</td>\n",
       "      <td>110</td>\n",
       "      <td>115</td>\n",
       "      <td>79</td>\n",
       "      <td>131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-03-31</td>\n",
       "      <td>114</td>\n",
       "      <td>101</td>\n",
       "      <td>75</td>\n",
       "      <td>85</td>\n",
       "      <td>45</td>\n",
       "      <td>96</td>\n",
       "      <td>120</td>\n",
       "      <td>75</td>\n",
       "      <td>142</td>\n",
       "      <td>109</td>\n",
       "      <td>69</td>\n",
       "      <td>110</td>\n",
       "      <td>117</td>\n",
       "      <td>74</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-04-30</td>\n",
       "      <td>107</td>\n",
       "      <td>94</td>\n",
       "      <td>44</td>\n",
       "      <td>85</td>\n",
       "      <td>35</td>\n",
       "      <td>99</td>\n",
       "      <td>112</td>\n",
       "      <td>75</td>\n",
       "      <td>135</td>\n",
       "      <td>98</td>\n",
       "      <td>59</td>\n",
       "      <td>137</td>\n",
       "      <td>101</td>\n",
       "      <td>72</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>92</td>\n",
       "      <td>104</td>\n",
       "      <td>66</td>\n",
       "      <td>97</td>\n",
       "      <td>48</td>\n",
       "      <td>81</td>\n",
       "      <td>108</td>\n",
       "      <td>81</td>\n",
       "      <td>138</td>\n",
       "      <td>89</td>\n",
       "      <td>64</td>\n",
       "      <td>124</td>\n",
       "      <td>107</td>\n",
       "      <td>83</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2018-06-30</td>\n",
       "      <td>91</td>\n",
       "      <td>79</td>\n",
       "      <td>74</td>\n",
       "      <td>87</td>\n",
       "      <td>41</td>\n",
       "      <td>104</td>\n",
       "      <td>99</td>\n",
       "      <td>73</td>\n",
       "      <td>114</td>\n",
       "      <td>116</td>\n",
       "      <td>61</td>\n",
       "      <td>117</td>\n",
       "      <td>122</td>\n",
       "      <td>80</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2018-07-31</td>\n",
       "      <td>102</td>\n",
       "      <td>117</td>\n",
       "      <td>87</td>\n",
       "      <td>75</td>\n",
       "      <td>52</td>\n",
       "      <td>91</td>\n",
       "      <td>107</td>\n",
       "      <td>72</td>\n",
       "      <td>137</td>\n",
       "      <td>104</td>\n",
       "      <td>94</td>\n",
       "      <td>113</td>\n",
       "      <td>116</td>\n",
       "      <td>60</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2018-08-31</td>\n",
       "      <td>95</td>\n",
       "      <td>89</td>\n",
       "      <td>74</td>\n",
       "      <td>69</td>\n",
       "      <td>50</td>\n",
       "      <td>88</td>\n",
       "      <td>115</td>\n",
       "      <td>69</td>\n",
       "      <td>141</td>\n",
       "      <td>94</td>\n",
       "      <td>73</td>\n",
       "      <td>115</td>\n",
       "      <td>108</td>\n",
       "      <td>86</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2018-09-30</td>\n",
       "      <td>88</td>\n",
       "      <td>106</td>\n",
       "      <td>63</td>\n",
       "      <td>76</td>\n",
       "      <td>57</td>\n",
       "      <td>103</td>\n",
       "      <td>118</td>\n",
       "      <td>63</td>\n",
       "      <td>129</td>\n",
       "      <td>96</td>\n",
       "      <td>80</td>\n",
       "      <td>100</td>\n",
       "      <td>102</td>\n",
       "      <td>80</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2018-10-31</td>\n",
       "      <td>97</td>\n",
       "      <td>93</td>\n",
       "      <td>55</td>\n",
       "      <td>96</td>\n",
       "      <td>60</td>\n",
       "      <td>90</td>\n",
       "      <td>102</td>\n",
       "      <td>74</td>\n",
       "      <td>122</td>\n",
       "      <td>104</td>\n",
       "      <td>74</td>\n",
       "      <td>115</td>\n",
       "      <td>101</td>\n",
       "      <td>66</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2018-11-30</td>\n",
       "      <td>110</td>\n",
       "      <td>97</td>\n",
       "      <td>45</td>\n",
       "      <td>114</td>\n",
       "      <td>41</td>\n",
       "      <td>91</td>\n",
       "      <td>121</td>\n",
       "      <td>56</td>\n",
       "      <td>121</td>\n",
       "      <td>70</td>\n",
       "      <td>86</td>\n",
       "      <td>129</td>\n",
       "      <td>95</td>\n",
       "      <td>79</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>101</td>\n",
       "      <td>105</td>\n",
       "      <td>63</td>\n",
       "      <td>83</td>\n",
       "      <td>66</td>\n",
       "      <td>86</td>\n",
       "      <td>116</td>\n",
       "      <td>76</td>\n",
       "      <td>130</td>\n",
       "      <td>93</td>\n",
       "      <td>69</td>\n",
       "      <td>121</td>\n",
       "      <td>121</td>\n",
       "      <td>75</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2019-01-31</td>\n",
       "      <td>90</td>\n",
       "      <td>85</td>\n",
       "      <td>59</td>\n",
       "      <td>72</td>\n",
       "      <td>48</td>\n",
       "      <td>71</td>\n",
       "      <td>95</td>\n",
       "      <td>50</td>\n",
       "      <td>112</td>\n",
       "      <td>98</td>\n",
       "      <td>80</td>\n",
       "      <td>134</td>\n",
       "      <td>121</td>\n",
       "      <td>86</td>\n",
       "      <td>126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2019-02-28</td>\n",
       "      <td>111</td>\n",
       "      <td>96</td>\n",
       "      <td>51</td>\n",
       "      <td>93</td>\n",
       "      <td>59</td>\n",
       "      <td>90</td>\n",
       "      <td>118</td>\n",
       "      <td>68</td>\n",
       "      <td>130</td>\n",
       "      <td>94</td>\n",
       "      <td>74</td>\n",
       "      <td>118</td>\n",
       "      <td>115</td>\n",
       "      <td>82</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2019-03-31</td>\n",
       "      <td>85</td>\n",
       "      <td>106</td>\n",
       "      <td>70</td>\n",
       "      <td>88</td>\n",
       "      <td>46</td>\n",
       "      <td>84</td>\n",
       "      <td>122</td>\n",
       "      <td>72</td>\n",
       "      <td>124</td>\n",
       "      <td>90</td>\n",
       "      <td>61</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>68</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2019-04-30</td>\n",
       "      <td>99</td>\n",
       "      <td>101</td>\n",
       "      <td>78</td>\n",
       "      <td>91</td>\n",
       "      <td>53</td>\n",
       "      <td>94</td>\n",
       "      <td>116</td>\n",
       "      <td>69</td>\n",
       "      <td>150</td>\n",
       "      <td>102</td>\n",
       "      <td>66</td>\n",
       "      <td>128</td>\n",
       "      <td>106</td>\n",
       "      <td>81</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2019-05-31</td>\n",
       "      <td>101</td>\n",
       "      <td>105</td>\n",
       "      <td>58</td>\n",
       "      <td>67</td>\n",
       "      <td>50</td>\n",
       "      <td>102</td>\n",
       "      <td>104</td>\n",
       "      <td>80</td>\n",
       "      <td>151</td>\n",
       "      <td>93</td>\n",
       "      <td>57</td>\n",
       "      <td>120</td>\n",
       "      <td>114</td>\n",
       "      <td>77</td>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2019-06-30</td>\n",
       "      <td>117</td>\n",
       "      <td>107</td>\n",
       "      <td>57</td>\n",
       "      <td>88</td>\n",
       "      <td>59</td>\n",
       "      <td>96</td>\n",
       "      <td>101</td>\n",
       "      <td>67</td>\n",
       "      <td>107</td>\n",
       "      <td>84</td>\n",
       "      <td>80</td>\n",
       "      <td>118</td>\n",
       "      <td>125</td>\n",
       "      <td>80</td>\n",
       "      <td>109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2019-07-31</td>\n",
       "      <td>106</td>\n",
       "      <td>121</td>\n",
       "      <td>68</td>\n",
       "      <td>83</td>\n",
       "      <td>47</td>\n",
       "      <td>95</td>\n",
       "      <td>100</td>\n",
       "      <td>70</td>\n",
       "      <td>136</td>\n",
       "      <td>99</td>\n",
       "      <td>71</td>\n",
       "      <td>121</td>\n",
       "      <td>116</td>\n",
       "      <td>73</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2019-08-31</td>\n",
       "      <td>102</td>\n",
       "      <td>96</td>\n",
       "      <td>69</td>\n",
       "      <td>88</td>\n",
       "      <td>64</td>\n",
       "      <td>77</td>\n",
       "      <td>109</td>\n",
       "      <td>69</td>\n",
       "      <td>132</td>\n",
       "      <td>96</td>\n",
       "      <td>80</td>\n",
       "      <td>129</td>\n",
       "      <td>109</td>\n",
       "      <td>91</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2019-09-30</td>\n",
       "      <td>116</td>\n",
       "      <td>119</td>\n",
       "      <td>71</td>\n",
       "      <td>91</td>\n",
       "      <td>54</td>\n",
       "      <td>95</td>\n",
       "      <td>122</td>\n",
       "      <td>74</td>\n",
       "      <td>133</td>\n",
       "      <td>78</td>\n",
       "      <td>65</td>\n",
       "      <td>128</td>\n",
       "      <td>103</td>\n",
       "      <td>74</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2019-10-31</td>\n",
       "      <td>118</td>\n",
       "      <td>93</td>\n",
       "      <td>66</td>\n",
       "      <td>95</td>\n",
       "      <td>52</td>\n",
       "      <td>96</td>\n",
       "      <td>103</td>\n",
       "      <td>66</td>\n",
       "      <td>114</td>\n",
       "      <td>86</td>\n",
       "      <td>77</td>\n",
       "      <td>126</td>\n",
       "      <td>107</td>\n",
       "      <td>88</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2019-11-30</td>\n",
       "      <td>91</td>\n",
       "      <td>111</td>\n",
       "      <td>54</td>\n",
       "      <td>84</td>\n",
       "      <td>47</td>\n",
       "      <td>90</td>\n",
       "      <td>114</td>\n",
       "      <td>66</td>\n",
       "      <td>89</td>\n",
       "      <td>86</td>\n",
       "      <td>77</td>\n",
       "      <td>114</td>\n",
       "      <td>117</td>\n",
       "      <td>84</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>96</td>\n",
       "      <td>102</td>\n",
       "      <td>52</td>\n",
       "      <td>94</td>\n",
       "      <td>50</td>\n",
       "      <td>88</td>\n",
       "      <td>115</td>\n",
       "      <td>59</td>\n",
       "      <td>123</td>\n",
       "      <td>93</td>\n",
       "      <td>78</td>\n",
       "      <td>112</td>\n",
       "      <td>118</td>\n",
       "      <td>80</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2020-01-31</td>\n",
       "      <td>94</td>\n",
       "      <td>85</td>\n",
       "      <td>56</td>\n",
       "      <td>104</td>\n",
       "      <td>49</td>\n",
       "      <td>89</td>\n",
       "      <td>113</td>\n",
       "      <td>84</td>\n",
       "      <td>139</td>\n",
       "      <td>99</td>\n",
       "      <td>70</td>\n",
       "      <td>119</td>\n",
       "      <td>130</td>\n",
       "      <td>89</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2020-02-29</td>\n",
       "      <td>97</td>\n",
       "      <td>116</td>\n",
       "      <td>72</td>\n",
       "      <td>110</td>\n",
       "      <td>49</td>\n",
       "      <td>89</td>\n",
       "      <td>120</td>\n",
       "      <td>54</td>\n",
       "      <td>127</td>\n",
       "      <td>103</td>\n",
       "      <td>65</td>\n",
       "      <td>117</td>\n",
       "      <td>117</td>\n",
       "      <td>89</td>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2020-03-31</td>\n",
       "      <td>102</td>\n",
       "      <td>96</td>\n",
       "      <td>61</td>\n",
       "      <td>92</td>\n",
       "      <td>63</td>\n",
       "      <td>97</td>\n",
       "      <td>125</td>\n",
       "      <td>67</td>\n",
       "      <td>127</td>\n",
       "      <td>96</td>\n",
       "      <td>66</td>\n",
       "      <td>127</td>\n",
       "      <td>111</td>\n",
       "      <td>86</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2020-04-30</td>\n",
       "      <td>111</td>\n",
       "      <td>115</td>\n",
       "      <td>69</td>\n",
       "      <td>107</td>\n",
       "      <td>57</td>\n",
       "      <td>92</td>\n",
       "      <td>126</td>\n",
       "      <td>62</td>\n",
       "      <td>140</td>\n",
       "      <td>97</td>\n",
       "      <td>66</td>\n",
       "      <td>111</td>\n",
       "      <td>116</td>\n",
       "      <td>84</td>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2020-05-31</td>\n",
       "      <td>91</td>\n",
       "      <td>105</td>\n",
       "      <td>59</td>\n",
       "      <td>66</td>\n",
       "      <td>53</td>\n",
       "      <td>95</td>\n",
       "      <td>109</td>\n",
       "      <td>55</td>\n",
       "      <td>119</td>\n",
       "      <td>92</td>\n",
       "      <td>62</td>\n",
       "      <td>120</td>\n",
       "      <td>114</td>\n",
       "      <td>89</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2020-06-30</td>\n",
       "      <td>111</td>\n",
       "      <td>90</td>\n",
       "      <td>80</td>\n",
       "      <td>86</td>\n",
       "      <td>54</td>\n",
       "      <td>85</td>\n",
       "      <td>103</td>\n",
       "      <td>68</td>\n",
       "      <td>135</td>\n",
       "      <td>98</td>\n",
       "      <td>62</td>\n",
       "      <td>119</td>\n",
       "      <td>111</td>\n",
       "      <td>79</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>2020-07-31</td>\n",
       "      <td>108</td>\n",
       "      <td>104</td>\n",
       "      <td>66</td>\n",
       "      <td>92</td>\n",
       "      <td>58</td>\n",
       "      <td>87</td>\n",
       "      <td>115</td>\n",
       "      <td>63</td>\n",
       "      <td>115</td>\n",
       "      <td>89</td>\n",
       "      <td>71</td>\n",
       "      <td>161</td>\n",
       "      <td>115</td>\n",
       "      <td>76</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>2020-08-31</td>\n",
       "      <td>83</td>\n",
       "      <td>86</td>\n",
       "      <td>68</td>\n",
       "      <td>100</td>\n",
       "      <td>43</td>\n",
       "      <td>92</td>\n",
       "      <td>98</td>\n",
       "      <td>73</td>\n",
       "      <td>153</td>\n",
       "      <td>92</td>\n",
       "      <td>72</td>\n",
       "      <td>131</td>\n",
       "      <td>129</td>\n",
       "      <td>87</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>2020-09-30</td>\n",
       "      <td>87</td>\n",
       "      <td>102</td>\n",
       "      <td>69</td>\n",
       "      <td>87</td>\n",
       "      <td>50</td>\n",
       "      <td>77</td>\n",
       "      <td>99</td>\n",
       "      <td>62</td>\n",
       "      <td>134</td>\n",
       "      <td>106</td>\n",
       "      <td>66</td>\n",
       "      <td>114</td>\n",
       "      <td>134</td>\n",
       "      <td>68</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>54</td>\n",
       "      <td>100</td>\n",
       "      <td>54</td>\n",
       "      <td>82</td>\n",
       "      <td>96</td>\n",
       "      <td>48</td>\n",
       "      <td>126</td>\n",
       "      <td>103</td>\n",
       "      <td>69</td>\n",
       "      <td>105</td>\n",
       "      <td>121</td>\n",
       "      <td>70</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>2020-11-30</td>\n",
       "      <td>81</td>\n",
       "      <td>107</td>\n",
       "      <td>73</td>\n",
       "      <td>88</td>\n",
       "      <td>47</td>\n",
       "      <td>91</td>\n",
       "      <td>104</td>\n",
       "      <td>65</td>\n",
       "      <td>119</td>\n",
       "      <td>98</td>\n",
       "      <td>66</td>\n",
       "      <td>133</td>\n",
       "      <td>133</td>\n",
       "      <td>76</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>2020-12-31</td>\n",
       "      <td>96</td>\n",
       "      <td>96</td>\n",
       "      <td>73</td>\n",
       "      <td>111</td>\n",
       "      <td>44</td>\n",
       "      <td>105</td>\n",
       "      <td>116</td>\n",
       "      <td>62</td>\n",
       "      <td>125</td>\n",
       "      <td>91</td>\n",
       "      <td>71</td>\n",
       "      <td>126</td>\n",
       "      <td>121</td>\n",
       "      <td>79</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>2021-01-31</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>57</td>\n",
       "      <td>81</td>\n",
       "      <td>45</td>\n",
       "      <td>97</td>\n",
       "      <td>101</td>\n",
       "      <td>70</td>\n",
       "      <td>128</td>\n",
       "      <td>92</td>\n",
       "      <td>72</td>\n",
       "      <td>110</td>\n",
       "      <td>118</td>\n",
       "      <td>66</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>2021-02-28</td>\n",
       "      <td>100</td>\n",
       "      <td>106</td>\n",
       "      <td>58</td>\n",
       "      <td>92</td>\n",
       "      <td>48</td>\n",
       "      <td>71</td>\n",
       "      <td>98</td>\n",
       "      <td>52</td>\n",
       "      <td>117</td>\n",
       "      <td>93</td>\n",
       "      <td>77</td>\n",
       "      <td>108</td>\n",
       "      <td>125</td>\n",
       "      <td>84</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>2021-03-31</td>\n",
       "      <td>107</td>\n",
       "      <td>85</td>\n",
       "      <td>61</td>\n",
       "      <td>76</td>\n",
       "      <td>64</td>\n",
       "      <td>75</td>\n",
       "      <td>125</td>\n",
       "      <td>77</td>\n",
       "      <td>139</td>\n",
       "      <td>92</td>\n",
       "      <td>89</td>\n",
       "      <td>118</td>\n",
       "      <td>123</td>\n",
       "      <td>79</td>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>2021-04-30</td>\n",
       "      <td>103</td>\n",
       "      <td>94</td>\n",
       "      <td>62</td>\n",
       "      <td>89</td>\n",
       "      <td>53</td>\n",
       "      <td>104</td>\n",
       "      <td>114</td>\n",
       "      <td>77</td>\n",
       "      <td>142</td>\n",
       "      <td>97</td>\n",
       "      <td>61</td>\n",
       "      <td>118</td>\n",
       "      <td>99</td>\n",
       "      <td>82</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>2021-05-31</td>\n",
       "      <td>101</td>\n",
       "      <td>116</td>\n",
       "      <td>61</td>\n",
       "      <td>89</td>\n",
       "      <td>51</td>\n",
       "      <td>81</td>\n",
       "      <td>100</td>\n",
       "      <td>49</td>\n",
       "      <td>133</td>\n",
       "      <td>80</td>\n",
       "      <td>73</td>\n",
       "      <td>123</td>\n",
       "      <td>97</td>\n",
       "      <td>74</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>2021-06-30</td>\n",
       "      <td>99</td>\n",
       "      <td>110</td>\n",
       "      <td>65</td>\n",
       "      <td>90</td>\n",
       "      <td>62</td>\n",
       "      <td>79</td>\n",
       "      <td>108</td>\n",
       "      <td>77</td>\n",
       "      <td>133</td>\n",
       "      <td>89</td>\n",
       "      <td>65</td>\n",
       "      <td>116</td>\n",
       "      <td>125</td>\n",
       "      <td>68</td>\n",
       "      <td>117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>2021-07-31</td>\n",
       "      <td>86</td>\n",
       "      <td>103</td>\n",
       "      <td>61</td>\n",
       "      <td>102</td>\n",
       "      <td>47</td>\n",
       "      <td>84</td>\n",
       "      <td>112</td>\n",
       "      <td>71</td>\n",
       "      <td>128</td>\n",
       "      <td>107</td>\n",
       "      <td>69</td>\n",
       "      <td>138</td>\n",
       "      <td>110</td>\n",
       "      <td>71</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>2021-08-31</td>\n",
       "      <td>105</td>\n",
       "      <td>91</td>\n",
       "      <td>63</td>\n",
       "      <td>77</td>\n",
       "      <td>54</td>\n",
       "      <td>81</td>\n",
       "      <td>99</td>\n",
       "      <td>68</td>\n",
       "      <td>114</td>\n",
       "      <td>97</td>\n",
       "      <td>63</td>\n",
       "      <td>133</td>\n",
       "      <td>126</td>\n",
       "      <td>79</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>2021-09-30</td>\n",
       "      <td>101</td>\n",
       "      <td>94</td>\n",
       "      <td>67</td>\n",
       "      <td>96</td>\n",
       "      <td>48</td>\n",
       "      <td>86</td>\n",
       "      <td>93</td>\n",
       "      <td>69</td>\n",
       "      <td>127</td>\n",
       "      <td>92</td>\n",
       "      <td>77</td>\n",
       "      <td>125</td>\n",
       "      <td>106</td>\n",
       "      <td>67</td>\n",
       "      <td>108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>2021-10-31</td>\n",
       "      <td>93</td>\n",
       "      <td>105</td>\n",
       "      <td>54</td>\n",
       "      <td>95</td>\n",
       "      <td>45</td>\n",
       "      <td>80</td>\n",
       "      <td>103</td>\n",
       "      <td>68</td>\n",
       "      <td>129</td>\n",
       "      <td>87</td>\n",
       "      <td>64</td>\n",
       "      <td>123</td>\n",
       "      <td>100</td>\n",
       "      <td>72</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>2021-11-30</td>\n",
       "      <td>109</td>\n",
       "      <td>118</td>\n",
       "      <td>67</td>\n",
       "      <td>77</td>\n",
       "      <td>51</td>\n",
       "      <td>92</td>\n",
       "      <td>104</td>\n",
       "      <td>67</td>\n",
       "      <td>132</td>\n",
       "      <td>93</td>\n",
       "      <td>74</td>\n",
       "      <td>124</td>\n",
       "      <td>126</td>\n",
       "      <td>86</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>83</td>\n",
       "      <td>99</td>\n",
       "      <td>66</td>\n",
       "      <td>85</td>\n",
       "      <td>47</td>\n",
       "      <td>87</td>\n",
       "      <td>118</td>\n",
       "      <td>74</td>\n",
       "      <td>140</td>\n",
       "      <td>93</td>\n",
       "      <td>67</td>\n",
       "      <td>129</td>\n",
       "      <td>149</td>\n",
       "      <td>74</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>2022-01-31</td>\n",
       "      <td>111</td>\n",
       "      <td>95</td>\n",
       "      <td>69</td>\n",
       "      <td>86</td>\n",
       "      <td>55</td>\n",
       "      <td>106</td>\n",
       "      <td>113</td>\n",
       "      <td>80</td>\n",
       "      <td>127</td>\n",
       "      <td>83</td>\n",
       "      <td>60</td>\n",
       "      <td>130</td>\n",
       "      <td>126</td>\n",
       "      <td>83</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>2022-02-28</td>\n",
       "      <td>114</td>\n",
       "      <td>113</td>\n",
       "      <td>58</td>\n",
       "      <td>104</td>\n",
       "      <td>55</td>\n",
       "      <td>88</td>\n",
       "      <td>116</td>\n",
       "      <td>67</td>\n",
       "      <td>108</td>\n",
       "      <td>97</td>\n",
       "      <td>60</td>\n",
       "      <td>113</td>\n",
       "      <td>113</td>\n",
       "      <td>70</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>2022-03-31</td>\n",
       "      <td>91</td>\n",
       "      <td>90</td>\n",
       "      <td>66</td>\n",
       "      <td>89</td>\n",
       "      <td>53</td>\n",
       "      <td>91</td>\n",
       "      <td>118</td>\n",
       "      <td>62</td>\n",
       "      <td>128</td>\n",
       "      <td>87</td>\n",
       "      <td>74</td>\n",
       "      <td>117</td>\n",
       "      <td>102</td>\n",
       "      <td>70</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>2022-04-30</td>\n",
       "      <td>102</td>\n",
       "      <td>121</td>\n",
       "      <td>62</td>\n",
       "      <td>86</td>\n",
       "      <td>37</td>\n",
       "      <td>104</td>\n",
       "      <td>114</td>\n",
       "      <td>83</td>\n",
       "      <td>122</td>\n",
       "      <td>91</td>\n",
       "      <td>71</td>\n",
       "      <td>110</td>\n",
       "      <td>126</td>\n",
       "      <td>84</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>2022-05-31</td>\n",
       "      <td>116</td>\n",
       "      <td>103</td>\n",
       "      <td>53</td>\n",
       "      <td>78</td>\n",
       "      <td>44</td>\n",
       "      <td>91</td>\n",
       "      <td>111</td>\n",
       "      <td>62</td>\n",
       "      <td>143</td>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>150</td>\n",
       "      <td>118</td>\n",
       "      <td>81</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>2022-06-30</td>\n",
       "      <td>86</td>\n",
       "      <td>88</td>\n",
       "      <td>69</td>\n",
       "      <td>89</td>\n",
       "      <td>60</td>\n",
       "      <td>97</td>\n",
       "      <td>106</td>\n",
       "      <td>49</td>\n",
       "      <td>112</td>\n",
       "      <td>104</td>\n",
       "      <td>77</td>\n",
       "      <td>144</td>\n",
       "      <td>120</td>\n",
       "      <td>95</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>2022-07-31</td>\n",
       "      <td>99</td>\n",
       "      <td>115</td>\n",
       "      <td>65</td>\n",
       "      <td>88</td>\n",
       "      <td>57</td>\n",
       "      <td>81</td>\n",
       "      <td>95</td>\n",
       "      <td>90</td>\n",
       "      <td>129</td>\n",
       "      <td>93</td>\n",
       "      <td>88</td>\n",
       "      <td>122</td>\n",
       "      <td>125</td>\n",
       "      <td>71</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>2022-08-31</td>\n",
       "      <td>114</td>\n",
       "      <td>107</td>\n",
       "      <td>52</td>\n",
       "      <td>89</td>\n",
       "      <td>55</td>\n",
       "      <td>88</td>\n",
       "      <td>118</td>\n",
       "      <td>52</td>\n",
       "      <td>136</td>\n",
       "      <td>97</td>\n",
       "      <td>62</td>\n",
       "      <td>126</td>\n",
       "      <td>122</td>\n",
       "      <td>78</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2022-09-30</td>\n",
       "      <td>101</td>\n",
       "      <td>97</td>\n",
       "      <td>66</td>\n",
       "      <td>93</td>\n",
       "      <td>51</td>\n",
       "      <td>101</td>\n",
       "      <td>117</td>\n",
       "      <td>68</td>\n",
       "      <td>130</td>\n",
       "      <td>82</td>\n",
       "      <td>72</td>\n",
       "      <td>140</td>\n",
       "      <td>112</td>\n",
       "      <td>77</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>2022-10-31</td>\n",
       "      <td>92</td>\n",
       "      <td>111</td>\n",
       "      <td>82</td>\n",
       "      <td>72</td>\n",
       "      <td>66</td>\n",
       "      <td>79</td>\n",
       "      <td>103</td>\n",
       "      <td>70</td>\n",
       "      <td>124</td>\n",
       "      <td>86</td>\n",
       "      <td>65</td>\n",
       "      <td>117</td>\n",
       "      <td>108</td>\n",
       "      <td>84</td>\n",
       "      <td>108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>2022-11-30</td>\n",
       "      <td>96</td>\n",
       "      <td>101</td>\n",
       "      <td>66</td>\n",
       "      <td>76</td>\n",
       "      <td>73</td>\n",
       "      <td>84</td>\n",
       "      <td>121</td>\n",
       "      <td>69</td>\n",
       "      <td>109</td>\n",
       "      <td>79</td>\n",
       "      <td>76</td>\n",
       "      <td>135</td>\n",
       "      <td>115</td>\n",
       "      <td>93</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2022-12-31</td>\n",
       "      <td>96</td>\n",
       "      <td>111</td>\n",
       "      <td>74</td>\n",
       "      <td>77</td>\n",
       "      <td>45</td>\n",
       "      <td>87</td>\n",
       "      <td>104</td>\n",
       "      <td>74</td>\n",
       "      <td>114</td>\n",
       "      <td>97</td>\n",
       "      <td>78</td>\n",
       "      <td>108</td>\n",
       "      <td>121</td>\n",
       "      <td>71</td>\n",
       "      <td>117</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date  Software_1  Software_2  Software_3  Software_4  Software_5  \\\n",
       "0   2018-01-31         104          97          63          72          50   \n",
       "1   2018-02-28          89         128          61          95          52   \n",
       "2   2018-03-31         114         101          75          85          45   \n",
       "3   2018-04-30         107          94          44          85          35   \n",
       "4   2018-05-31          92         104          66          97          48   \n",
       "5   2018-06-30          91          79          74          87          41   \n",
       "6   2018-07-31         102         117          87          75          52   \n",
       "7   2018-08-31          95          89          74          69          50   \n",
       "8   2018-09-30          88         106          63          76          57   \n",
       "9   2018-10-31          97          93          55          96          60   \n",
       "10  2018-11-30         110          97          45         114          41   \n",
       "11  2018-12-31         101         105          63          83          66   \n",
       "12  2019-01-31          90          85          59          72          48   \n",
       "13  2019-02-28         111          96          51          93          59   \n",
       "14  2019-03-31          85         106          70          88          46   \n",
       "15  2019-04-30          99         101          78          91          53   \n",
       "16  2019-05-31         101         105          58          67          50   \n",
       "17  2019-06-30         117         107          57          88          59   \n",
       "18  2019-07-31         106         121          68          83          47   \n",
       "19  2019-08-31         102          96          69          88          64   \n",
       "20  2019-09-30         116         119          71          91          54   \n",
       "21  2019-10-31         118          93          66          95          52   \n",
       "22  2019-11-30          91         111          54          84          47   \n",
       "23  2019-12-31          96         102          52          94          50   \n",
       "24  2020-01-31          94          85          56         104          49   \n",
       "25  2020-02-29          97         116          72         110          49   \n",
       "26  2020-03-31         102          96          61          92          63   \n",
       "27  2020-04-30         111         115          69         107          57   \n",
       "28  2020-05-31          91         105          59          66          53   \n",
       "29  2020-06-30         111          90          80          86          54   \n",
       "30  2020-07-31         108         104          66          92          58   \n",
       "31  2020-08-31          83          86          68         100          43   \n",
       "32  2020-09-30          87         102          69          87          50   \n",
       "33  2020-10-31         105         105          54         100          54   \n",
       "34  2020-11-30          81         107          73          88          47   \n",
       "35  2020-12-31          96          96          73         111          44   \n",
       "36  2021-01-31         105         105          57          81          45   \n",
       "37  2021-02-28         100         106          58          92          48   \n",
       "38  2021-03-31         107          85          61          76          64   \n",
       "39  2021-04-30         103          94          62          89          53   \n",
       "40  2021-05-31         101         116          61          89          51   \n",
       "41  2021-06-30          99         110          65          90          62   \n",
       "42  2021-07-31          86         103          61         102          47   \n",
       "43  2021-08-31         105          91          63          77          54   \n",
       "44  2021-09-30         101          94          67          96          48   \n",
       "45  2021-10-31          93         105          54          95          45   \n",
       "46  2021-11-30         109         118          67          77          51   \n",
       "47  2021-12-31          83          99          66          85          47   \n",
       "48  2022-01-31         111          95          69          86          55   \n",
       "49  2022-02-28         114         113          58         104          55   \n",
       "50  2022-03-31          91          90          66          89          53   \n",
       "51  2022-04-30         102         121          62          86          37   \n",
       "52  2022-05-31         116         103          53          78          44   \n",
       "53  2022-06-30          86          88          69          89          60   \n",
       "54  2022-07-31          99         115          65          88          57   \n",
       "55  2022-08-31         114         107          52          89          55   \n",
       "56  2022-09-30         101          97          66          93          51   \n",
       "57  2022-10-31          92         111          82          72          66   \n",
       "58  2022-11-30          96         101          66          76          73   \n",
       "59  2022-12-31          96         111          74          77          45   \n",
       "\n",
       "    Software_6  Software_7  Software_8  Software_9  Software_10  Software_11  \\\n",
       "0           95         101          63         134          101           72   \n",
       "1           97         113          73         144          117           68   \n",
       "2           96         120          75         142          109           69   \n",
       "3           99         112          75         135           98           59   \n",
       "4           81         108          81         138           89           64   \n",
       "5          104          99          73         114          116           61   \n",
       "6           91         107          72         137          104           94   \n",
       "7           88         115          69         141           94           73   \n",
       "8          103         118          63         129           96           80   \n",
       "9           90         102          74         122          104           74   \n",
       "10          91         121          56         121           70           86   \n",
       "11          86         116          76         130           93           69   \n",
       "12          71          95          50         112           98           80   \n",
       "13          90         118          68         130           94           74   \n",
       "14          84         122          72         124           90           61   \n",
       "15          94         116          69         150          102           66   \n",
       "16         102         104          80         151           93           57   \n",
       "17          96         101          67         107           84           80   \n",
       "18          95         100          70         136           99           71   \n",
       "19          77         109          69         132           96           80   \n",
       "20          95         122          74         133           78           65   \n",
       "21          96         103          66         114           86           77   \n",
       "22          90         114          66          89           86           77   \n",
       "23          88         115          59         123           93           78   \n",
       "24          89         113          84         139           99           70   \n",
       "25          89         120          54         127          103           65   \n",
       "26          97         125          67         127           96           66   \n",
       "27          92         126          62         140           97           66   \n",
       "28          95         109          55         119           92           62   \n",
       "29          85         103          68         135           98           62   \n",
       "30          87         115          63         115           89           71   \n",
       "31          92          98          73         153           92           72   \n",
       "32          77          99          62         134          106           66   \n",
       "33          82          96          48         126          103           69   \n",
       "34          91         104          65         119           98           66   \n",
       "35         105         116          62         125           91           71   \n",
       "36          97         101          70         128           92           72   \n",
       "37          71          98          52         117           93           77   \n",
       "38          75         125          77         139           92           89   \n",
       "39         104         114          77         142           97           61   \n",
       "40          81         100          49         133           80           73   \n",
       "41          79         108          77         133           89           65   \n",
       "42          84         112          71         128          107           69   \n",
       "43          81          99          68         114           97           63   \n",
       "44          86          93          69         127           92           77   \n",
       "45          80         103          68         129           87           64   \n",
       "46          92         104          67         132           93           74   \n",
       "47          87         118          74         140           93           67   \n",
       "48         106         113          80         127           83           60   \n",
       "49          88         116          67         108           97           60   \n",
       "50          91         118          62         128           87           74   \n",
       "51         104         114          83         122           91           71   \n",
       "52          91         111          62         143           91           91   \n",
       "53          97         106          49         112          104           77   \n",
       "54          81          95          90         129           93           88   \n",
       "55          88         118          52         136           97           62   \n",
       "56         101         117          68         130           82           72   \n",
       "57          79         103          70         124           86           65   \n",
       "58          84         121          69         109           79           76   \n",
       "59          87         104          74         114           97           78   \n",
       "\n",
       "    Software_12  Software_13  Software_14  Software_15  \n",
       "0           134          118           95          114  \n",
       "1           110          115           79          131  \n",
       "2           110          117           74           84  \n",
       "3           137          101           72           98  \n",
       "4           124          107           83          122  \n",
       "5           117          122           80           99  \n",
       "6           113          116           60          104  \n",
       "7           115          108           86           86  \n",
       "8           100          102           80           76  \n",
       "9           115          101           66          122  \n",
       "10          129           95           79          107  \n",
       "11          121          121           75          101  \n",
       "12          134          121           86          126  \n",
       "13          118          115           82          104  \n",
       "14          132          132           68           98  \n",
       "15          128          106           81           96  \n",
       "16          120          114           77          105  \n",
       "17          118          125           80          109  \n",
       "18          121          116           73           91  \n",
       "19          129          109           91           97  \n",
       "20          128          103           74          118  \n",
       "21          126          107           88          107  \n",
       "22          114          117           84          119  \n",
       "23          112          118           80           86  \n",
       "24          119          130           89          107  \n",
       "25          117          117           89          105  \n",
       "26          127          111           86          118  \n",
       "27          111          116           84          105  \n",
       "28          120          114           89          111  \n",
       "29          119          111           79           86  \n",
       "30          161          115           76          116  \n",
       "31          131          129           87           96  \n",
       "32          114          134           68           94  \n",
       "33          105          121           70          114  \n",
       "34          133          133           76           96  \n",
       "35          126          121           79          120  \n",
       "36          110          118           66           98  \n",
       "37          108          125           84           72  \n",
       "38          118          123           79          105  \n",
       "39          118           99           82          107  \n",
       "40          123           97           74           91  \n",
       "41          116          125           68          117  \n",
       "42          138          110           71           96  \n",
       "43          133          126           79           99  \n",
       "44          125          106           67          108  \n",
       "45          123          100           72          116  \n",
       "46          124          126           86          123  \n",
       "47          129          149           74           94  \n",
       "48          130          126           83          116  \n",
       "49          113          113           70           93  \n",
       "50          117          102           70          111  \n",
       "51          110          126           84          104  \n",
       "52          150          118           81           89  \n",
       "53          144          120           95          116  \n",
       "54          122          125           71          110  \n",
       "55          126          122           78          120  \n",
       "56          140          112           77           94  \n",
       "57          117          108           84          108  \n",
       "58          135          115           93           88  \n",
       "59          108          121           71          117  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_time_series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f2118cd1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>InvoiceNo</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Most popular item of the day</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Date</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>CustomerID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>85123A</td>\n",
       "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
       "      <td>6.0</td>\n",
       "      <td>01/12/2018</td>\n",
       "      <td>2.55</td>\n",
       "      <td>43009.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>71053</td>\n",
       "      <td>WHITE METAL LANTERN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>02/12/2018</td>\n",
       "      <td>3.39</td>\n",
       "      <td>79874.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>84406B</td>\n",
       "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
       "      <td>8.0</td>\n",
       "      <td>03/12/2018</td>\n",
       "      <td>2.75</td>\n",
       "      <td>45061.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>84029G</td>\n",
       "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
       "      <td>6.0</td>\n",
       "      <td>04/12/2018</td>\n",
       "      <td>3.39</td>\n",
       "      <td>47110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>84029E</td>\n",
       "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
       "      <td>6.0</td>\n",
       "      <td>05/12/2018</td>\n",
       "      <td>3.39</td>\n",
       "      <td>77834.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1623</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1624</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1626</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1627</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1628 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      InvoiceNo ItemCode         Most popular item of the day  Quantity  \\\n",
       "0           1.0   85123A   WHITE HANGING HEART T-LIGHT HOLDER       6.0   \n",
       "1           2.0    71053                  WHITE METAL LANTERN       6.0   \n",
       "2           3.0   84406B       CREAM CUPID HEARTS COAT HANGER       8.0   \n",
       "3           4.0   84029G  KNITTED UNION FLAG HOT WATER BOTTLE       6.0   \n",
       "4           5.0   84029E       RED WOOLLY HOTTIE WHITE HEART.       6.0   \n",
       "...         ...      ...                                  ...       ...   \n",
       "1623        NaN      NaN                                  NaN       NaN   \n",
       "1624        NaN      NaN                                  NaN       NaN   \n",
       "1625        NaN      NaN                                  NaN       NaN   \n",
       "1626        NaN      NaN                                  NaN       NaN   \n",
       "1627        NaN      NaN                                  NaN       NaN   \n",
       "\n",
       "            Date  UnitPrice  CustomerID  \n",
       "0     01/12/2018       2.55     43009.0  \n",
       "1     02/12/2018       3.39     79874.0  \n",
       "2     03/12/2018       2.75     45061.0  \n",
       "3     04/12/2018       3.39     47110.0  \n",
       "4     05/12/2018       3.39     77834.0  \n",
       "...          ...        ...         ...  \n",
       "1623         NaN        NaN         NaN  \n",
       "1624         NaN        NaN         NaN  \n",
       "1625         NaN        NaN         NaN  \n",
       "1626         NaN        NaN         NaN  \n",
       "1627         NaN        NaN         NaN  \n",
       "\n",
       "[1628 rows x 7 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_retail_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "06ce13be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0              0\n",
       "Issue_ID                0\n",
       "Issue_Type              0\n",
       "System_Component        0\n",
       "Customer_Impact         0\n",
       "Time_to_Resolve_hrs     0\n",
       "Reported_By             0\n",
       "Priority                0\n",
       "Previous_Occurrences    0\n",
       "Issue_Reported_Month    0\n",
       "Resolved                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking for missing values\n",
    "\n",
    "df_classification.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dfa5b6be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date           0\n",
       "Software_1     0\n",
       "Software_2     0\n",
       "Software_3     0\n",
       "Software_4     0\n",
       "Software_5     0\n",
       "Software_6     0\n",
       "Software_7     0\n",
       "Software_8     0\n",
       "Software_9     0\n",
       "Software_10    0\n",
       "Software_11    0\n",
       "Software_12    0\n",
       "Software_13    0\n",
       "Software_14    0\n",
       "Software_15    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_time_series.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "612b6995",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "InvoiceNo                       628\n",
       "ItemCode                        628\n",
       "Most popular item of the day    629\n",
       "Quantity                        628\n",
       "Date                            628\n",
       "UnitPrice                       628\n",
       "CustomerID                      628\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_retail_list.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9ba77ee1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0                int64\n",
       "Issue_ID                  int64\n",
       "Issue_Type               object\n",
       "System_Component         object\n",
       "Customer_Impact          object\n",
       "Time_to_Resolve_hrs     float64\n",
       "Reported_By              object\n",
       "Priority                 object\n",
       "Previous_Occurrences      int64\n",
       "Issue_Reported_Month     object\n",
       "Resolved                   bool\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking data types\n",
    "\n",
    "df_classification.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8c248cc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date           object\n",
       "Software_1      int64\n",
       "Software_2      int64\n",
       "Software_3      int64\n",
       "Software_4      int64\n",
       "Software_5      int64\n",
       "Software_6      int64\n",
       "Software_7      int64\n",
       "Software_8      int64\n",
       "Software_9      int64\n",
       "Software_10     int64\n",
       "Software_11     int64\n",
       "Software_12     int64\n",
       "Software_13     int64\n",
       "Software_14     int64\n",
       "Software_15     int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_time_series.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4c46099d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "InvoiceNo                       float64\n",
       "ItemCode                         object\n",
       "Most popular item of the day     object\n",
       "Quantity                        float64\n",
       "Date                             object\n",
       "UnitPrice                       float64\n",
       "CustomerID                      float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_retail_list.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7d7b9280",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We convert the date into datetime format\n",
    "\n",
    "df_time_series['Date'] = pd.to_datetime(df_time_series['Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "109205e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date           datetime64[ns]\n",
       "Software_1              int64\n",
       "Software_2              int64\n",
       "Software_3              int64\n",
       "Software_4              int64\n",
       "Software_5              int64\n",
       "Software_6              int64\n",
       "Software_7              int64\n",
       "Software_8              int64\n",
       "Software_9              int64\n",
       "Software_10             int64\n",
       "Software_11             int64\n",
       "Software_12             int64\n",
       "Software_13             int64\n",
       "Software_14             int64\n",
       "Software_15             int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_time_series.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9fc9233a",
   "metadata": {},
   "outputs": [],
   "source": [
    "selected_columns = df_time_series[['Software_1', 'Software_2', 'Software_3', 'Software_4', 'Software_5', 'Software_6', 'Software_7', 'Software_8', 'Software_9', 'Software_10', 'Software_11', 'Software_12', 'Software_13', 'Software_14', 'Software_15']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ee14b05b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Software_9     7691\n",
      "Software_12    7365\n",
      "Software_13    6970\n",
      "Software_7     6586\n",
      "Software_15    6260\n",
      "Software_2     6137\n",
      "Software_1     5998\n",
      "Software_10    5653\n",
      "Software_6     5394\n",
      "Software_4     5287\n",
      "Software_14    4724\n",
      "Software_11    4266\n",
      "Software_8     4068\n",
      "Software_3     3847\n",
      "Software_5     3113\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Determining top software products\n",
    "\n",
    "column_sums = selected_columns.sum()\n",
    "sorted_column_sums = column_sums.sort_values(ascending=False)\n",
    "print(sorted_column_sums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "dbb14d3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Software_1</th>\n",
       "      <th>Software_2</th>\n",
       "      <th>Software_3</th>\n",
       "      <th>Software_4</th>\n",
       "      <th>Software_5</th>\n",
       "      <th>Software_6</th>\n",
       "      <th>Software_7</th>\n",
       "      <th>Software_8</th>\n",
       "      <th>Software_9</th>\n",
       "      <th>Software_10</th>\n",
       "      <th>Software_11</th>\n",
       "      <th>Software_12</th>\n",
       "      <th>Software_13</th>\n",
       "      <th>Software_14</th>\n",
       "      <th>Software_15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>60.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>99.966667</td>\n",
       "      <td>102.283333</td>\n",
       "      <td>64.116667</td>\n",
       "      <td>88.116667</td>\n",
       "      <td>51.883333</td>\n",
       "      <td>89.900000</td>\n",
       "      <td>109.766667</td>\n",
       "      <td>67.800000</td>\n",
       "      <td>128.183333</td>\n",
       "      <td>94.216667</td>\n",
       "      <td>71.100000</td>\n",
       "      <td>122.750000</td>\n",
       "      <td>116.166667</td>\n",
       "      <td>78.733333</td>\n",
       "      <td>104.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.596904</td>\n",
       "      <td>10.551073</td>\n",
       "      <td>8.574878</td>\n",
       "      <td>10.764177</td>\n",
       "      <td>7.309366</td>\n",
       "      <td>8.482684</td>\n",
       "      <td>8.803633</td>\n",
       "      <td>9.136999</td>\n",
       "      <td>11.985149</td>\n",
       "      <td>8.592649</td>\n",
       "      <td>8.274322</td>\n",
       "      <td>11.194165</td>\n",
       "      <td>10.371353</td>\n",
       "      <td>7.804533</td>\n",
       "      <td>12.743449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>81.000000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>72.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>92.000000</td>\n",
       "      <td>94.750000</td>\n",
       "      <td>58.000000</td>\n",
       "      <td>82.500000</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>84.000000</td>\n",
       "      <td>102.750000</td>\n",
       "      <td>62.750000</td>\n",
       "      <td>121.750000</td>\n",
       "      <td>89.750000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>108.750000</td>\n",
       "      <td>72.750000</td>\n",
       "      <td>96.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>101.000000</td>\n",
       "      <td>103.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>88.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>111.500000</td>\n",
       "      <td>68.500000</td>\n",
       "      <td>129.000000</td>\n",
       "      <td>93.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>121.000000</td>\n",
       "      <td>116.500000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>105.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.750000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>94.250000</td>\n",
       "      <td>55.500000</td>\n",
       "      <td>96.000000</td>\n",
       "      <td>116.250000</td>\n",
       "      <td>74.000000</td>\n",
       "      <td>136.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>129.000000</td>\n",
       "      <td>122.250000</td>\n",
       "      <td>84.000000</td>\n",
       "      <td>116.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>118.000000</td>\n",
       "      <td>128.000000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>106.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>153.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>161.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>131.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Software_1  Software_2  Software_3  Software_4  Software_5  Software_6  \\\n",
       "count   60.000000   60.000000   60.000000   60.000000   60.000000   60.000000   \n",
       "mean    99.966667  102.283333   64.116667   88.116667   51.883333   89.900000   \n",
       "std      9.596904   10.551073    8.574878   10.764177    7.309366    8.482684   \n",
       "min     81.000000   79.000000   44.000000   66.000000   35.000000   71.000000   \n",
       "25%     92.000000   94.750000   58.000000   82.500000   47.000000   84.000000   \n",
       "50%    101.000000  103.000000   65.000000   88.000000   51.000000   90.000000   \n",
       "75%    107.000000  107.750000   69.000000   94.250000   55.500000   96.000000   \n",
       "max    118.000000  128.000000   87.000000  114.000000   73.000000  106.000000   \n",
       "\n",
       "       Software_7  Software_8  Software_9  Software_10  Software_11  \\\n",
       "count   60.000000   60.000000   60.000000    60.000000    60.000000   \n",
       "mean   109.766667   67.800000  128.183333    94.216667    71.100000   \n",
       "std      8.803633    9.136999   11.985149     8.592649     8.274322   \n",
       "min     93.000000   48.000000   89.000000    70.000000    57.000000   \n",
       "25%    102.750000   62.750000  121.750000    89.750000    65.000000   \n",
       "50%    111.500000   68.500000  129.000000    93.000000    71.000000   \n",
       "75%    116.250000   74.000000  136.000000    98.000000    77.000000   \n",
       "max    126.000000   90.000000  153.000000   117.000000    94.000000   \n",
       "\n",
       "       Software_12  Software_13  Software_14  Software_15  \n",
       "count    60.000000    60.000000    60.000000    60.000000  \n",
       "mean    122.750000   116.166667    78.733333   104.333333  \n",
       "std      11.194165    10.371353     7.804533    12.743449  \n",
       "min     100.000000    95.000000    60.000000    72.000000  \n",
       "25%     115.000000   108.750000    72.750000    96.000000  \n",
       "50%     121.000000   116.500000    79.000000   105.000000  \n",
       "75%     129.000000   122.250000    84.000000   116.000000  \n",
       "max     161.000000   149.000000    95.000000   131.000000  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_time_series.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c43cb0e1",
   "metadata": {},
   "source": [
    "# Time Series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b0406412",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We use the dataset df_time_series which has the software sales\n",
    "\n",
    "#We set the date column as index to conduct the time series models\n",
    "\n",
    "df_time_series.set_index('Date', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "144bdb95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ADF statistics: -7.015455720341245\n",
      "p-value: 6.751118029685305e-10\n"
     ]
    }
   ],
   "source": [
    "#Ducky Fuller Test to check the stationarity/seasonality of the data\n",
    "\n",
    "#H0: the data is not stationary\n",
    "#H1: the data is stationary\n",
    "#alpha = 0.05\n",
    "\n",
    "result = adfuller(df_time_series['Software_9'])\n",
    "print('ADF statistics:', result[0])\n",
    "print('p-value:', result[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7fb9f3b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ADF statistics: -3.6081304177943263\n",
      "p-value: 0.005607480526198153\n"
     ]
    }
   ],
   "source": [
    "#H0: the data is not stationary\n",
    "#H1: the data is stationary\n",
    "#alpha = 0.05\n",
    "\n",
    "result = adfuller(df_time_series['Software_12'])\n",
    "print('ADF statistics:', result[0])\n",
    "print('p-value:', result[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f65f6e5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ADF statistics: -5.566843293188857\n",
      "p-value: 1.498042470719463e-06\n"
     ]
    }
   ],
   "source": [
    "#H0: the data is not stationary\n",
    "#H1: the data is stationary\n",
    "#alpha = 0.05\n",
    "\n",
    "result = adfuller(df_time_series['Software_13'])\n",
    "print('ADF statistics:', result[0])\n",
    "print('p-value:', result[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b678731e",
   "metadata": {},
   "source": [
    "We reject the hypothesis for Software_9, Software_12, and Software_13 \n",
    "as the p-value of each is less then our alpha of 0.05\n",
    "\n",
    "Alternative hypothesis is accepted\n",
    "\n",
    "Software_9, Software_12, Software_13 data is stationary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "aed0c351",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating new dataframes, picking the variable we want to work with\n",
    "\n",
    "df_Software_9 = df_time_series[['Software_9']]\n",
    "df_Software_12 = df_time_series[['Software_12']]\n",
    "df_Software_13 = df_time_series[['Software_13']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20c2e7ff",
   "metadata": {},
   "source": [
    "# #Software_9 forecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2852790f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We start with ARIMA model\n",
    "\n",
    "#Split the data into training and test set\n",
    "\n",
    "train_data = df_Software_9[:int(0.8*len(df_Software_9))]\n",
    "test_data = df_Software_9[int(0.8*len(df_Software_9)):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "36ad6a7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n"
     ]
    }
   ],
   "source": [
    "#Building the ARIMA model\n",
    "\n",
    "arima_model_9 = ARIMA(train_data['Software_9'], order = (1, 1, 1))\n",
    "arima_fit_9 = arima_model_9.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f7b38fc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Forecast for testing set\n",
    "\n",
    "arima_forcast_9 = arima_fit_9.forecast(steps = len(test_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5edcb9a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABIkAAAJuCAYAAAA0I1JYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3xUZfo28OtMy6T3CoHQO0gREBVwqSJ2xf7K2tctNqy7YsMuFvDn6u6iYO8VK6AISFFRmkAIJbT0hPRk6nn/OCUJhJBkzpk5M3N9P+aTNnPmmRgmc+657+sRRFEUQUREREREREREYc0U6AUQEREREREREVHgsUhEREREREREREQsEhEREREREREREYtEREREREREREQEFomIiIiIiIiIiAgsEhEREREREREREVgkIiIiIiIiIiIisEhERERERERERERgkYiIiIiIiIiIiMAiEREREQWJBQsWQBAEDB48+LiXEQShxVtcXBzGjRuHd95555jLLl68GIIg4Ndff1W/9uCDD0IQBJhMJuzdu/eY69TV1SEuLg6CIGD27NmtrmHr1q0QBAFWqxWFhYUdv6MBsnLlSgiCgJUrV3b4usrPMj8/X/N1ERERkf+wSERERERB4dVXXwUA/PHHH9iwYcNxL3fRRRdh3bp1WLt2LV5++WVUV1fj8ssvx9tvv93u24qJicFrr712zNc/+OADuFwuWK3W4173f//7HwDA7Xbj9ddfb/dtEhEREQUai0RERERkeL/++is2b96Ms846CwCwaNGi4142PT0dY8eOxSmnnILLL78cX375JQDglVdeafftXXLJJViyZAm8Xm+Lry9atAjnn38+bDZbq9dzOBx46623MGzYMHTp0kUtbBEREREFAxaJiIiIyPCUotATTzyBcePG4d1330V9fX27rtu9e3ekpqaiuLi43bd3zTXX4ODBg1i2bJn6tV27dmHNmjW45pprjnu9Tz/9FOXl5bjuuutw9dVXq9dpj9mzZyMmJgY7d+7EtGnTEB0djczMTDzxxBMAgPXr1+O0005DdHQ0+vbtiyVLlhxzjG3btuHcc89FYmIi7HY7TjrppFYvt3PnTkyfPh1RUVFISUnBTTfdhJqamlbXtXz5ckyaNAlxcXGIiorCqaeeihUrVrTrPhEREVFwYZGIiIiIDK2hoQHvvPMOTj75ZAwePBjXXHMNampq8MEHH7Tr+lVVVaioqEDfvn3bfZt9+vTB6aef3qIT6NVXX0VOTg4mTZp03OstWrQIERERuOKKK3DNNddAEIQ2u56O5nK5cMEFF+Css87CZ599hjPPPBP33nsv7rvvPlx99dW45ppr8Mknn6Bfv36YPXs2Nm7cqF43NzcX48aNwx9//IEFCxbg448/xsCBAzF79mw89dRT6uWKi4sxYcIEbNu2DS+99BLeeOMN1NbW4m9/+9sx63nzzTcxdepUxMXFYcmSJXj//feRlJSEadOmsVBEREQUgiyBXgARERFRWz788ENUVVXh2muvBSCNgt16661YtGgRrr766mMuL4oi3G43RFFEfn4+5syZg6ioKDzwwAMdut1rrrkGN910EyoqKhAfH4/XX38dN954IwRBaPXy+/fvx4oVKzBr1iwkJiYiMTER48ePxwcffIAFCxYgNjb2hLfpdDoxb948XHDBBQCAiRMnYunSpXj88cfx22+/Yfjw4QCAUaNGIS0tDW+//TZGjhwJQArddjqd+OGHH5CdnQ0AmDFjBiorK/HQQw/hxhtvRHx8PJ577jmUlpbi999/x7BhwwAAZ555JqZOnYoDBw6oa6mvr8ctt9yCmTNn4pNPPlG/PmPGDIwYMQL33Xdfm9lQREREFHzYSURERESGtmjRIkRGRuLSSy8FIIVKX3zxxVi9ejXy8vKOufxLL70Eq9UKm82Gvn374uuvv8Y777yjFlPa6+KLL4bNZsNbb72Fr776CkVFRcfd0QwAXnvtNXi93hbjaNdccw3q6urw3nvvtes2BUHAjBkz1M8tFgt69+6NzMxMtUAEAElJSUhLS8P+/fvVr33//feYNGmSWiBSzJ49G/X19Vi3bh0A4IcffsCgQYPUApHi8ssvb/H52rVrUVFRgauvvhput1t983q9mD59On755RfU1dW1634RERFRcGCRiIiIiAxr9+7dWLVqFc466yyIoojKykpUVlbioosuAoBWg6FnzZqFX375BWvXrsUrr7yC2NhYXHrppa0WlNoSHR2NSy65BK+++ioWLVqEyZMno3v37q1e1uv1YvHixcjKysLIkSPVdU6ePBnR0dHtHjmLioqC3W5v8TWbzYakpKRjLmuz2dDY2Kh+Xl5ejszMzGMul5WVpX5feZ+RkXHM5Y7+mpLhdNFFF8FqtbZ4e/LJJyGKIioqKtp1v4iIiCg4cNyMiIiIDOvVV1+FKIr48MMP8eGHHx7z/SVLlmDevHkwm83q11JTUzFq1CgAwCmnnIIBAwZgwoQJuO2227B06dIO3f4111yD//3vf9iyZQveeuut415u+fLlaldPcnLyMd9fv349tm/fjoEDB3bo9jsiOTkZhYWFx3y9oKAAAJCSkqJerqio6JjLHf015fILFy7E2LFjW73N9PR0n9ZMRERExsIiERERERmSx+PBkiVL0KtXL/zvf/875vtLly7F/Pnz8fXXX2PmzJnHPc7pp5+O//f//h+WLFmCdevW4ZRTTmn3Gk455RRcc801qKqqwvnnn3/cyy1atAgmkwkff/wx4uPjW3zv0KFDuOqqq/Dqq6/imWeeafdtd9SkSZPwySefoKCgQO0eAoDXX38dUVFRaqHnjDPOwFNPPYXNmze3GDl7++23Wxzv1FNPRUJCArZv395qqDURERGFHhaJiIiIyJC+/vprFBQU4Mknn8TEiROP+f7gwYPx4osvYtGiRW0WiQDgkUcewXvvvYf7778fy5cv79A6TjQqVl5ejs8++wzTpk3Dueee2+plnnvuObz++ut4/PHHYbVaO3T77fXAAw9g6dKlOOOMMzB37lwkJSXhrbfewpdffomnnnpKLV7deuutePXVV3HWWWdh3rx5SE9Px1tvvYWdO3e2OF5MTAwWLlyIq6++GhUVFbjooouQlpaG0tJSbN68GaWlpfj3v/+ty30hIiKiwGAmERERERnSokWLYLPZ8Oc//7nV76ekpOD888/H0qVL1fyc48nOzsbf//53rFixAqtWrdJ0nW+++SYcDgduvPHG417mhhtuQGlpKb744gtNb7u5fv36Ye3atejXrx/++te/4rzzzsO2bdvw2muv4c4771Qvl5GRgR9//BEDBw7EX/7yF1x55ZWw2+148cUXjznmlVdeiR9++AG1tbW48cYbMXnyZNxyyy347bffMGnSJN3uCxEREQWGIIqiGOhFEBERERERERFRYLGTiIiIiIiIiIiIWCQiIiIiIiIiIiIWiYiIiIiIiIiICCwSERERERERERERWCQiIiIiIiIiIiKwSERERERERERERAAsgV6AEXi9XhQUFCA2NhaCIAR6OUREREREREREmhBFETU1NcjKyoLJ1HavEItEAAoKCpCdnR3oZRARERERERER6eLgwYPo2rVrm5dhkQhAbGwsAOkHFhcXF+DVEBERERERERFpo7q6GtnZ2Wrtoy0sEgHqiFlcXByLREREREREREQUctoTr8PgaiIiIiIiIiIiYpGIiIiIiIiIiIhYJCIiIiIiIiIiIjCTiIiIiIiIiHzg8XjgcrkCvQyisGU2m2GxWNqVOXQiLBIRERERERFRp9TW1uLQoUMQRTHQSyEKa1FRUcjMzITNZvPpOCwSERERERERUYd5PB4cOnQIUVFRSE1N1aSLgYg6RhRFOJ1OlJaWYt++fejTpw9Mps4nC7FIRERERERERB3mcrkgiiJSU1MRGRkZ6OUQha3IyEhYrVbs378fTqcTdru908dicDURERERERF1GjuIiALPl+6hFsfR5ChERERERERERBTUWCQiIiIiIiIiIiIWiYiIiIiIiIh8MXHiRNx6663tvnx+fj4EQcCmTZt0WxNRZ7BIRERERERERGFBEIQ232bPnt2p43788cd45JFH2n357OxsFBYWYvDgwZ26vfZSilHKW2xsLAYNGoS//vWvyMvL6/DxcnJy8Pzzz2u/UDIM7m5GREREREREYaGwsFD9+L333sPcuXORm5urfu3oXdpcLhesVusJj5uUlNShdZjNZmRkZHToOr5Yvnw5Bg0ahPr6emzduhUvvPAChg0bhi+++AKTJk3y2zrI+NhJRERERERERD4TRRH1TndA3kRRbNcaMzIy1Lf4+HgIgqB+3tjYiISEBLz//vuYOHEi7HY73nzzTZSXl+Oyyy5D165dERUVhSFDhuCdd95pcdyjx81ycnLw2GOP4ZprrkFsbCy6deuG//znP+r3jx43W7lyJQRBwIoVKzBq1ChERUVh3LhxLQpYADBv3jykpaUhNjYW1113He655x6cdNJJJ7zfycnJyMjIQM+ePXHuuedi+fLlGDNmDK699lp4PB4AwJ49e3DuueciPT0dMTExOPnkk7F8+fIW93H//v247bbb1M4kAO36+VDwYCcRERERERER+azB5cHAud8G5La3PzwNUTZtTm/vvvtuzJ8/H6+99hoiIiLQ2NiIkSNH4u6770ZcXBy+/PJLXHXVVejZsyfGjBlz3OPMnz8fjzzyCO677z58+OGH+Mtf/oLx48ejf//+x73OP//5T8yfPx+pqam46aabcM011+Cnn34CALz11lt49NFH8dJLL+HUU0/Fu+++i/nz56NHjx4dvo8mkwm33HILzj//fGzcuBGjR49GbW0tZsyYgXnz5sFut2PJkiU4++yzkZubi27duuHjjz/GsGHDcMMNN+D6669Xj9XZnw8ZE4tERERERERERLJbb70VF1xwQYuvzZkzR/3473//O7755ht88MEHbRZBZsyYgZtvvhmAVHh67rnnsHLlyjaLRI8++igmTJgAALjnnntw1llnobGxEXa7HQsXLsS1116LP//5zwCAuXPn4rvvvkNtbW2n7qeyjvz8fIwePRrDhg3DsGHD1O/PmzcPn3zyCT7//HP87W9/Q1JSEsxmM2JjY1uMynXp0qVTPx8yJhaJiIiIiIiIyGeRVjO2PzwtYLetlVGjRrX43OPx4IknnsB7772Hw4cPw+FwwOFwIDo6us3jDB06VP1YGWsrKSlp93UyMzMBACUlJejWrRtyc3PVopNi9OjR+P7779t1v46mjOgpY2N1dXV46KGHsHTpUhQUFMDtdqOhoQEHDhxo8zid/fmQMbFIRERERERERD4TBEGzka9AOrq4MX/+fDz33HN4/vnnMWTIEERHR+PWW2+F0+ls8zhHB14LggCv19vu6yjFm+bXUb6maG8WU2t27NgBAOq42p133olvv/0WzzzzDHr37o3IyEhcdNFFJ7yfnf35kDEF/79gIiIiIiIiIp2sXr0a5557Lq688koAUtEmLy8PAwYM8Os6+vXrh59//hlXXXWV+rVff/21U8fyer1YsGABevTogeHDhwOQ7ufs2bNx/vnnAwBqa2uRn5/f4no2m00NulYY5edD2uDuZkRERERERETH0bt3byxbtgxr167Fjh07cOONN6KoqMjv6/j73/+ORYsWYcmSJcjLy8O8efOwZcuWY7qLWlNeXo6ioiLs3bsXn3/+OSZPnoyff/4ZixYtgtksjer17t0bH3/8MTZt2oTNmzfj8ssvP6bzKScnB6tWrcLhw4dRVlamXs8IPx/SBotERERERCFmV3ENrlq0ARv3Hwn0UoiIgt7999+PESNGYNq0aZg4cSIyMjJw3nnn+X0dV1xxBe69917MmTMHI0aMwL59+zB79mzY7fYTXnfy5MnIzMzEkCFDcM8992DAgAHYsmULzjjjDPUyzz33HBITEzFu3DicffbZmDZtGkaMGNHiOA8//DDy8/PRq1cvpKamAjDOz4e0IYi+DDGGiOrqasTHx6OqqgpxcXGBXg4RERGRT+Z/l4uF3+/GhSO6Yv6sYSe+AhFRJzQ2NmLfvn3o0aNHuwoVpL0pU6YgIyMDb7zxRqCXQgHW1r/HjtQ8mElEREREFGKqG1wAgMKqhgCvhIiItFJfX4+XX34Z06ZNg9lsxjvvvIPly5dj2bJlgV4ahRAWiYiIiIhCTE2jGwBQWNUY4JUQEZFWBEHAV199hXnz5sHhcKBfv3746KOPMHny5EAvjUIIi0REREREIaZaLhIVVDZAFMV2hZoSEZGxRUZGYvny5YFeBoU4BlcTERERhZiaRmnczOH24ki9K8CrISIiomDBIhERERFRiFHGzQCpm4iIiIioPVgkIiIiIgoxNY6m7iEWiYiIiKi9WCQiIiIiCjHNO4kYXk1ERETtxSIRERERUQgRRbHluFkVO4mIiIiofVgkIiIiIgohDS4PPF5R/bywkp1ERERE1D4sEhERERGFkOZdRABQyE4iIqKAWbx4MRISEgK9DKJ2Y5GIiIiIKITUNLbc8r6AnURERCpBENp8mz17dqePnZOTg+eff77F1y655BLs2rXLt0W3w+LFi9X7YDabkZiYiDFjxuDhhx9GVVVVh46Vn58PQRCwadMmfRZLhmYJ9AKIiIiISDvVcieRzWKC0+1FcXUjPF4RZpMQ4JUREQVeYWGh+vF7772HuXPnIjc3V/1aZGSkprcXGRmp+TGPJy4uDrm5uRBFEZWVlVi7di0ef/xxvPbaa/jpp5+QlZXll3VQcGMnEREREVEIUcbNeiRHwyQAbq+IslpHgFdFRGFBFAFnXWDeRPHE6wOQkZGhvsXHx0MQhBZfW7VqFUaOHAm73Y6ePXvioYcegtvdNMb74IMPolu3boiIiEBWVhb+8Y9/AAAmTpyI/fv347bbblM7eoBjx80efPBBnHTSSXjjjTeQk5OD+Ph4XHrppaipqVEvU1NTgyuuuALR0dHIzMzEc889h4kTJ+LWW29t874p9yUzMxMDBgzAtddei7Vr16K2thZ33XWXerlvvvkGp512GhISEpCcnIyZM2diz5496vd79OgBABg+fDgEQcDEiRMBAL/88gumTJmClJQUxMfHY8KECfjtt9/a9XOn4MFOIiKiMFHT6MJXWwvRKzUGo3KSAr0cItKJMm6WEGVFWqwdRdWNKKhsQHqcPcArI6KQ56oHHgtQt8p9BYAt2qdDfPvtt7jyyiuxYMECnH766dizZw9uuOEGAMADDzyADz/8EM899xzeffddDBo0CEVFRdi8eTMA4OOPP8awYcNwww034Prrr2/zdvbs2YNPP/0US5cuxZEjRzBr1iw88cQTePTRRwEAt99+O3766Sd8/vnnSE9Px9y5c/Hbb7/hpJNO6vB9SktLwxVXXIFXX30VHo8HZrMZdXV1uP322zFkyBDU1dVh7ty5OP/887Fp0yaYTCb8/PPPGD16NJYvX45BgwbBZrMBkIpXV199NRYsWAAAmD9/PmbMmIG8vDzExsZ2eG1kTCwSERGFuILKBixem493NhxAjcONLgmR+OmePwV6WUSkE6WTKNZuRWaCVCQqrGrE8ACvi4jI6B599FHcc889uPrqqwEAPXv2xCOPPIK77roLDzzwAA4cOICMjAxMnjwZVqsV3bp1w+jRowEASUlJMJvNiI2NRUZGRpu34/V6sXjxYrWwctVVV2HFihV49NFHUVNTgyVLluDtt9/GpEmTAACvvfaaT6Ni/fv3R01NDcrLy5GWloYLL7ywxfcXLVqEtLQ0bN++HYMHD0ZqaioAIDk5ucV9+dOfWj5/fOWVV5CYmIgff/wRM2fO7PT6yFhYJCIiClHbDlfhv6v34ssthXA32w67vI5jJ0ShTOkkirNbEGEx4XdUoqCSO5wRkR9Yo6SOnkDdto82btyIX375Re3oAQCPx4PGxkbU19fj4osvxvPPP4+ePXti+vTpmDFjBs4++2xYLB07rc7JyWnReZOZmYmSkhIAwN69e+FyudTiEwDEx8ejX79+nb5fojyKp4zA7dmzB/fffz/Wr1+PsrIyeL1eAMCBAwcwePDg4x6npKQEc+fOxffff4/i4mJ4PB7U19fjwIEDnV4bGQ+LREREIcTrFfFDbgn+u3ov1u+tUL9+Ss9kzDq5K257bzMaXV64PV5YzIylIwpFTZ1EFiTJ/84Lq7jDGRH5gSD4PPIVSF6vFw899BAuuOCCY75nt9uRnZ2N3NxcLFu2DMuXL8fNN9+Mp59+Gj/++COsVmu7b+foywqCoBZqji7oKMR2Zi61ZseOHYiLi0NycjIA4Oyzz0Z2djb++9//IisrC16vF4MHD4bT6WzzOLNnz0ZpaSmef/55dO/eHRERETjllFNOeD0KLiwSERGFgEaXBx//dhiL1uzFntI6AIDFJGDm0Excd3pPDO4SD4fbg9vek+bm65wexEeySEQUipqPmyVGSzkShVXsJCIiOpERI0YgNzcXvXv3Pu5lIiMjcc455+Ccc87BX//6V/Tv3x9bt27FiBEjYLPZ4PF4fFpDr169YLVa8fPPPyM7OxsAUF1djby8PEyYMKHDxyspKcHbb7+N8847DyaTCeXl5dixYwdeeeUVnH766QCANWvWtLiOkkF09H1ZvXo1XnrpJcyYMQMAcPDgQZSVlXV4TWRsAS0SrVq1Ck8//TQ2btyIwsJCfPLJJzjvvPPU78+ePRtLlixpcZ0xY8Zg/fr16ucOhwNz5szBO++8g4aGBkyaNAkvvfQSunbt6q+7QUQUMGW1Dryxbj/eXL8f5XXSqzixERZcPqYbZp+ag8z4pi1XbWYTLCYBbq+Ieqcb8ZHtf8WLiIJHtTxuFmu3ICteCqsuqGQnERHRicydOxczZ85EdnY2Lr74YphMJmzZsgVbt27FvHnzsHjxYng8HowZMwZRUVF44403EBkZie7duwOQxshWrVqFSy+9FBEREUhJSenwGmJjY3H11VfjzjvvRFJSEtLS0vDAAw/AZDId0110NFEUUVRUBFEUUVlZiXXr1uGxxx5DfHw8nnjiCQBAYmIikpOT8Z///AeZmZk4cOAA7rnnnhbHSUtLQ2RkJL755ht07doVdrsd8fHx6N27N9544w2MGjUK1dXVuPPOOxEZGdnaUiiIBfRl5Lq6OgwbNgwvvvjicS8zffp0FBYWqm9fffVVi+/feuut+OSTT/Duu+9izZo1qK2txcyZM32u4BIRGdnuklrc+/EWjHvie7ywIg/ldU50SYjE/TMHYt19k3DvjAEtCkSA1LYcHSG9NlDncLd2WCIKAS2Dq6XHAXYSERGd2LRp07B06VIsW7YMJ598MsaOHYtnn31WLQIlJCTgv//9L0499VQMHToUK1aswBdffKGOcT388MPIz89Hr1691PDnznj22WdxyimnYObMmZg8eTJOPfVUDBgwAHZ727tUVldXIzMzE126dMEpp5yCV155BVdffTV+//13ZGZmAgBMJhPeffddbNy4EYMHD8Ztt92Gp59+usVxLBYLFixYgFdeeQVZWVk499xzAQCvvvoqjhw5guHDh+Oqq67CP/7xD6SlpXX6fpIxCaIvw40aEgSh1U6iyspKfPrpp61ep6qqCqmpqXjjjTdwySWXAAAKCgqQnZ2Nr776CtOmTWvXbVdXVyM+Ph5VVVWIi4vz9a4QEelCFEWs21uO/63eh+93lqhfH9Y1HteP74npgzJOmDM07vEVKKhqxGd/PRXDshN0XjERBcKl/1mH9XsrsPCy4RjTIwmjH1sBQQB2zTsTVmaREZGGGhsbsW/fPvTo0eOEBQzqvLq6OnTp0gXz58/HtddeG+jlkEG19e+xIzUPw2cSrVy5EmlpaUhISMCECRPw6KOPqtXKjRs3wuVyYerUqerls7KyMHjwYKxdu/a4RSKHwwGHo2l3n+rqan3vBBGRjxqcHly5aAM27j8CQMqFnDwgHdef3hMn5ySesP1YwU4iotDXPLg6JSYCVrMAl0dEcXUjuib6vvsPERHp6/fff8fOnTsxevRoVFVV4eGHHwYAtaOHSE+GLhKdeeaZuPjii9G9e3fs27cP999/P/70pz9h48aNiIiIQFFREWw2GxITE1tcLz09HUVFRcc97uOPP46HHnpI7+UTEWlmW0EVNu4/AqtZwCUnZ+OaU3ugZ2pMh48TpRSJnBzJJQpVzcfNTCYB6XF2HDrSgMIqFomIiILFM888g9zcXNhsNowcORKrV6/uVMYRUUcZukikjJABwODBgzFq1Ch0794dX375ZavbEipEUWzzVfV7770Xt99+u/p5dXW1mhxPRGRE5bVSKPWQLvGYd96QTh8nJsIMgJ1ERKGspllwNQBkxUfi0JEGFFQyl4iIKBgMHz4cGzduDPQyKEwF1WB6ZmYmunfvjry8PABARkYGnE4njhw50uJyJSUlSE9PP+5xIiIiEBcX1+KNiMjIyuukEdmk6AifjhNlUzqJWCQiCkWiKLYYNwOAzAQpl6CwijucERERUduCqkhUXl6OgwcPqsnsI0eOhNVqxbJly9TLFBYWYtu2bRg3blyglklEpLkKuZMoOdrm03FimElEFNIaXV64vdKeJLF2KwCoOx0WspOIiIiITiCg42a1tbXYvXu3+vm+ffuwadMmJCUlISkpCQ8++CAuvPBCZGZmIj8/H/fddx9SUlJw/vnnAwDi4+Nx7bXX4o477kBycjKSkpIwZ84cDBkyBJMnTw7U3SIi0lx5nVwkivGtSBRlU8bNmElEFIqUUTOTAETL/96z5E6iAnYSERER0QkEtEj066+/4owzzlA/V3KCrr76avz73//G1q1b8frrr6OyshKZmZk444wz8N577yE2Nla9znPPPQeLxYJZs2ahoaEBkyZNwuLFi2E2m/1+f4iI9FIhF4mS2ElERG2olkfNYiIsaj6j2klUxU4iIiIialtAi0QTJ06EKIrH/f633357wmPY7XYsXLgQCxcu1HJpRESGUqFZJxF3NyMKZU2h1Vb1a5nxciZRJTuJiIiIqG1BlUlERBSuymq1Ca6O5u5mRCHt6NBqAMhKkDqJyuucaHSxQExERETHxyIREVEQUDuJNBo3q+fuZkQhSSkSxTXrJEqMsiLCIj3lK2IuERGRZv7zn/8gOzsbJpMJzz//fKCXQ6QJFomIiAxOFEUcqddo3EwuEtWyk4goJDWNmzV1EgmCoHYTFTCXiIgIJSUluPHGG9GtWzdEREQgIyMD06ZNw7p169p9jOrqavztb3/D3XffjcOHD+OGG27AxIkTceutt+q3cB2tWLEC48aNQ2xsLDIzM3H33XfD7W77+WJOTg4EQWjx1rVrVz+tWB+zZ8/Geeed167LKffZarUiPT0dU6ZMwauvvgqv19uh21y8eDESEhI6t2AdsEhERGRw1Y1uuDxSfpvvwdXSuFk9M4mIQlJr42YAc4mIiJq78MILsXnzZixZsgS7du3C559/jokTJ6KioqLdxzhw4ABcLhfOOussZGZmIioqSscVH58oiics5pzIli1bMGPGDEyfPh2///473n33XXz++ee45557Tnjdhx9+GIWFherb77//3ul1uFyuTl83EKZPn47CwkLk5+fj66+/xhlnnIFbbrkFM2fO9Pn/SSCxSEREZHDlch5RTIQFERbfdm5UgqvZSUQUmloLrga4wxkR+Ycoiqh31Qfkra0NkZqrrKzEmjVr8OSTT+KMM85A9+7dMXr0aNx7770466yz1MsdOHAA5557LmJiYhAXF4dZs2ahuLgYgNT5MWTIEABAz549IQgCZs+ejR9//BEvvPCC2mGSn5+PkSNHYv78+epxzzvvPFgsFlRXVwMAioqKIAgCcnNzAQBvvvkmRo0ahdjYWGRkZODyyy9HSUmJev2VK1dCEAR8++23GDVqFCIiIrB69WqIooinnnoKPXv2RGRkJIYNG4YPP/ywXT+Td999F0OHDsXcuXPRu3dvTJgwAY8//jj+7//+DzU1NW1eV1mn8paamqp+79///jd69eoFm82Gfv364Y033mhxXUEQ8PLLL+Pcc89FdHQ05s2bBwD44osvMHLkSNjtdvTs2RMPPfRQi6JLZWUlbrjhBqSnp8Nut2Pw4MFYunQpAKC8vByXXXYZunbtiqioKAwZMgTvvPNOi9v98MMPMWTIEERGRiI5ORmTJ09GXV0dHnzwQSxZsgSfffaZ+v9w5cqVx73vShdaly5dMGLECNx333347LPP8PXXX2Px4sXq5Z599lkMGTIE0dHRyM7Oxs0334za2loA0v/PP//5z6iqqlJv88EHHwRw4t8FvQR0dzMiIjoxJY/I1y4ioFkmkYOdREShqPo4nURdEqROogJmEhGRjhrcDRjz9piA3PaGyzcgynribp6YmBjExMTg008/xdixYxERceymIKIo4rzzzkN0dDR+/PFHuN1u3HzzzbjkkkuwcuVKXHLJJcjOzsbkyZPx888/Izs7G5GRkdi1axcGDx6Mhx9+GACQmpqKiRMnYuXKlbjjjjsgiiJWr16NxMRErFmzBjNmzMAPP/yAjIwM9OvXDwDgdDrxyCOPoF+/figpKcFtt92G2bNn46uvvmqxxrvuugvPPPMMevbsiYSEBPzrX//Cxx9/jH//+9/o06cPVq1ahSuvvBKpqamYMGFCmz8Th8MBu93e4muRkZFobGzExo0bMXHixBP+XI/2ySef4JZbbsHzzz+PyZMnY+nSpfjzn/+Mrl274owzzlAv98ADD+Dxxx/Hc889B7PZjG+//RZXXnklFixYgNNPPx179uzBDTfcoF7W6/XizDPPRE1NDd5880306tUL27dvh9ksvZDa2NiIkSNH4u6770ZcXBy+/PJLXHXVVejZsyfGjBmDwsJCXHbZZXjqqadw/vnno6amRi2yzZkzBzt27EB1dTVee+01AEBSUlKH7vef/vQnDBs2DB9//DGuu+46AIDJZMKCBQuQk5ODffv24eabb8Zdd92Fl156CePGjcPzzz+PuXPnqoXCmJgYAO3/XdAai0RERAZXrmGRKMrG3c2IQlnTuNlRnURyJlFhJTuJiCi8WSwWLF68GNdffz1efvlljBgxAhMmTMCll16KoUOHAgCWL1+OLVu2YN++fcjOzgYAvPHGGxg0aBB++eUXnHzyyUhOTgYgFYIyMjIAADabDVFRUernADBx4kQsWrQIXq8XW7duhdlsxpVXXomVK1dixowZWLlyZYsizjXXXKN+3LNnTyxYsACjR49GbW2tWjwApDGvKVOmAADq6urw7LPP4vvvv8cpp5yiXnfNmjV45ZVXTlgkmjZtGp5//nm88847mDVrFoqKitSunsLCwjave/fdd+Nf//qX+vljjz2Gf/zjH3jmmWcwe/Zs3HzzzQCA22+/HevXr8czzzzTokh0+eWXt7jPV111Fe655x5cffXV6v145JFHcNddd+GBBx7A8uXL8fPPP2PHjh3o27evehlFly5dMGfOHPXzv//97/jmm2/wwQcfqEUit9uNCy64AN27dwcAtSsMkIpjDoejxf/Djurfvz+2bNmift48p6pHjx545JFH8Je//AUvvfQSbDYb4uPjIQjCMbfZ3t8FrbFIRERkcEonUYqPodVAUydRndMNURQhCILPxyQi42gtuBpolknETiIi0lGkJRIbLt8QsNturwsvvBBnnXUWVq9ejXXr1uGbb77BU089hf/973+YPXs2duzYgezsbLVABAADBw5EQkICduzYgZNPPrndtzV+/HjU1NTg999/x08//YQJEybgjDPOUIswK1eubFFE+P333/Hggw9i06ZNqKioUEOQDxw4gIEDB6qXGzVqlPrx9u3b0djYqBaNFE6nE8OHDz/hGqdOnYqnn34aN910E6666ipERETg/vvvx5o1a9QOneO58847MXv2bPXzlJQUAMCOHTvUDiDFqaeeihdeeKHF15rfDwDYuHEjfvnlFzz66KPq1zweDxobG1FfX49Nmzaha9euaoHoaB6PB0888QTee+89HD58GA6HAw6HA9HR0QCAYcOGYdKkSRgyZAimTZuGqVOn4qKLLkJiYmLbP6QOOPo59g8//IDHHnsM27dvR3V1NdxuNxobG1FXV6euqzXt/V3QGotEREQGp+W4mbK7mVcEGl1eRNp8yzgiImM5XnC1ursZO4mISEeCILRr5MsI7HY7pkyZgilTpmDu3Lm47rrr8MADD2D27NnHfSGtMy+wxcfH46STTsLKlSuxdu1a/OlPf8Lpp5+OTZs2IS8vD7t27VLHuerq6jB16lRMnToVb775JlJTU3HgwAFMmzYNTqezxXGbFxeU4sGXX36JLl26tLhca+N0rbn99ttx2223obCwEImJicjPz8e9996LHj16tHm9lJQU9O7du9XvHf2z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WiZRqPBxM4ZWExEREZFZWCQiIiLSWZO63SwUTSAST+Z1HZmZREREREREZmCRiIiISGf+GhtsFiVsejDPkbMgi0REREREZDIWiYiIiHQmSZI2cpZveDXHzYiIiIjIbCwSERERGaBRHTnrD+eXS8ROIiIiIiIyG4tEREREBtCrk4hFIiIiIiIyC4tEREREBmjyKp1EAyN5dhJFWCQiIiIiInOxSERERGSARo/aSZRncLWWSeRikYiIiIiIzMEiERERkQGafGomUZ6dRBw3IyIiIiKzsUhERERkAK2TiJlERERERFQmWCQiIiIygJZJlMd2s2giiUg8BYBFIiIiIiIyD4tEREREBihku1lwLKG97nXZdDsTEREREdFUWCQiIiIyQKO23SwGWZZz+rdi1MznssFqkXQ/GxERERHRRFgkIiIiMoDIJIolUwhFE9NcejzmERERERFRMbBIREREZACX3QqvUxkVy3XkLBhhkYiIiIiIzMciERERkUHSuUS5hVcH2UlEREREREXAIhEREZFBxMhZf46dRGLczO9ikYiIiIiIzMMiERERkUG08Opwbp1EgVF2EhERERGR+VgkIiIiMkiTNm6WZyaRm0UiIiIiIjIPi0REREQGafSonUQ5ZhJxuxkRERERFQOLRERERAYRwdX94XwziWy6n4mIiIiIaDIsEhERERlEyyTKs5PIz04iIiIiIjIRi0REREQGacpzu1lwLAGA42ZEREREZK6iFomee+45fOITn0BHRwckScLvf//7ce+XZRk33ngjOjo6UFNTg1WrVuGdd94Zd5loNIqrrroKTU1N8Hg8OOecc7Bv3z4TPwsiIqKJFdpJxCIREREREZmpqEWicDiMo48+GnfeeeeE7//hD3+IW2+9FXfeeSdeeeUVtLW1Ye3atQiFQtplrr76ajzxxBN45JFHsGnTJoyMjODss89GMpk069MgIiKakMgkGhqNI5FMZf3vghw3IyIiIqIiKGoi5plnnokzzzxzwvfJsoyf/OQn+O53v4tPf/rTAID77rsPra2teOihh/ClL30JgUAAv/rVr/DAAw9gzZo1AIAHH3wQs2bNwlNPPYUzzjjDtM+FiIjoQPVuByQJkGVgcDSGFp9r2n+TTMkIRTluRkRERETmK9lMol27dqG7uxvr1q3T3uZ0OnHqqafihRdeAAC89tpriMfj4y7T0dGBI488UrvMRKLRKILB4Lg/REREerNaJDS4lW6igSxziUKRuPY6i0REREREZKaSLRJ1d3cDAFpbW8e9vbW1VXtfd3c3HA4H6uvrJ73MRG655RbU1tZqf2bNmqXz6YmIiBRi5CzbIpHII3I7rLBbS/bXNBERERFVoJK/9ylJ0ri/y7J80NsONN1lrr/+egQCAe3P3r17dTkrERHRgZpEeHU4u/BqUSTyu9hFRERERETmKtkiUVtbGwAc1BHU29urdRe1tbUhFothaGho0stMxOl0wu/3j/tDRERkBLHhrD/HTiKOmhERERGR2Uq2SDRv3jy0tbVh48aN2ttisRieffZZrFy5EgBw7LHHwm63j7tMV1cX3n77be0yRERExdToEeNm2XUSBccYWk1ERERExVHU7WYjIyPYuXOn9vddu3Zh69ataGhowOzZs3H11Vfj5ptvxqJFi7Bo0SLcfPPNcLvduPDCCwEAtbW1uPzyy/HNb34TjY2NaGhowLXXXoslS5Zo286IiIiKqSnPTCI/i0REREREZLKiFoleffVVrF69Wvv7NddcAwC45JJLcO+99+K6667D2NgYrrjiCgwNDWH58uX429/+Bp/Pp/2b2267DTabDeeffz7GxsZw+umn495774XVajX98yEiIjpQY76ZRDVF/RVNRERERFWoqPdAV61aBVmWJ32/JEm48cYbceONN056GZfLhTvuuAN33HGHASckIiIqjBg3YyYREREREZW6ks0kIiIiqgS5dhIFIywSEREREVFxsEhERERkoHwziVgkIiIiIiKzsUhERERkINFJNBpLYjSWmPbyQZFJ5GKRiIiIiIjMxSIRERGRgTwOK5w25ddtNt1E7CQiIiIiomJhkYiIiMhAkiShScslmr5IJDqJat0sEhERERGRuVgkIiIiMlijlks0fXg1O4mIiIiIqFhYJCIiIjJYoye78GpZlhGMKLlFzCQiIiIiIrOxSERERGQwEV7dH566k2gkmkAyJQNgJxERERERmY9FIiIiIoOlx82m7iQSXUQOqwUuO39FExEREZG5eA+UiIjIYE0eNbh6mkyiwKiSR+SvsUOSJMPPRURERESUiUUiIiIig4lOov5pOolEaLW/xmb4mYiIiIiIDsQiERERkcG0TKLpOom42YyIiIiIiohFIiIiIoNp283C02USsUhERERERMXDIhEREZHBmtROosFwDCl1e9lEguwkIiIiIqIiYpGIiIjIYA1qJ1EyJWsjZRPRMolcLBIRERERkflYJCIiIjKYw2bRuoMGwpPnEjGTiIiIiIiKiUUiIiIiE2Sz4YxFIiIiIiIqJhaJiIiITNDkUXKJBqYoEjGTiIiIiIiKiUUiIiIiE4hOomzGzfw1NlPORERERESUiUUiIiIiE+QybuZnJxERERERFQGLRERERCZo1MbNpuokSgDguBkRERERFQeLRERERCZoEuNmU2USRZhJRERERETFwyIRERGRCRq9aifRJJlEkXgSsUQKAMfNiIiIiKg4WCQiIiIyQaNn6k4ikUdkkQCvg8HVRERERGQ+FomIiIhMIDqJ+ifJJMoMrbZYJNPORUREREQksEhERERkApFJFIwktLGyTMEx5hERERERUXGxSERERGQCv8sOm9ohNBg+eORM6yRysUhERERERMXBIhEREZEJLBYJDWou0UQjZwF2EhERERFRkbFIREREZJL0hrPJO4lYJCIiIiKiYmGRiIiIyCQil2hggk6i4FgCgBJcTURERERUDCwSERERmaTRI4pEU2QS1dhMPRMRERERkcAiERERkUnEuFl/mJlERERERFR6WCQiIiIySaM6btYfYiYREREREZUeFomIiIhM0uQRwdUTZBJFWCQiIiIiouJikYiIiMgkjd7JM4mCIpPIxSIRERERERUHi0REREQmaVIziSbabsZxMyIiIiIqNhaJiIiITKJlEoVjkGV53PtYJCIiIiKiYmORiIiIyCSNaiZRLJHCSDShvT2eTGE0lgTAIhERERERFQ+LRERERCapcVjhcVgBjM8lEnlEAOBz2Uw/FxERERERwCIRERGRqRq9B284E6NmXqcNNit/NRMRERFRcfCeKBERkYm0XKKMTiLmERERERFRKWCRiIiIyEQil2jcuFlEySfys0hEREREREXEIhEREZGJmtROooGRg8fN/MwjIiIiIqIiYpGIiIjIRGLcbCDMcTMiIiIiKi0sEhEREZlIjJv1Z3QSBVkkIiIiIqISwCIRERGRibROosxMIhaJiIiIiKgEsEhERERkoiavGlwdniCTiEUiIiIiIioiFomIiIhMNFEnETOJiIiIiKgUsEhERERkIpFJNDgaQzIlA2CRiIiIiIhKA4tEREREJqp32yFJgCwDQ6NKN1EwwiIRERERERUfi0REREQmslktqHePHzlLZxLZinYuIiIiIiIWiYiIiEzW6BFFIiW8OjDKTiIiIiIiKj4WiYiIiEwmwqv7wzGkUjJC0QQAbjcjIiIiouJikYiIiMhkjV4lvHpgJIpQNAFZya+G38UiEREREREVD4tEREREJmvypDOJgmoekdNmgctuLeaxiIiIiKjKsUhERERksia1k6h/JKqFVjOPiIiIiIiKjUUiIiIikzVqRaIYi0REREREVDJYJCIiIjKZCK4eCEe1cTMWiYiIiIio2FgkIiIiMlmTN51JJDqJuNmMiIiIiIqNRSIiIiKTNXrS2804bkZEREREpYJFIiIiIpOJcbNwLImeYBQAi0REREREVHwsEhEREZnM67TBYVN+Be/qHwHAcTMiIiIiKj4WiYiIiEwmSRKaPEo30Yf9YQCA32Ur5pGIiIiIiFgkIiIiKoZGr5JLtHdwFADHzYiIiIio+FgkIiIiKgKRS5SSlb+zSERERERExcYiERERURGIDWcCi0REREREVGwlXyQKhUK4+uqrMWfOHNTU1GDlypV45ZVXtPfLsowbb7wRHR0dqKmpwapVq/DOO+8U8cRERETTa1I7iQQGVxMRERFRsZV8kehf//VfsXHjRjzwwAN46623sG7dOqxZswb79+8HAPzwhz/ErbfeijvvvBOvvPIK2trasHbtWoRCoSKfnIiIaHKNBxSJ2ElERERERMVW0kWisbExPPbYY/jhD3+IU045BQsXLsSNN96IefPm4ec//zlkWcZPfvITfPe738WnP/1pHHnkkbjvvvswOjqKhx56qNjHJyIimhTHzYiIiIio1JR0kSiRSCCZTMLlco17e01NDTZt2oRdu3ahu7sb69at097ndDpx6qmn4oUXXpj0eqPRKILB4Lg/REREZsrsJLJZJLgd1iKehoiIiIioxItEPp8PK1aswE033YTOzk4kk0k8+OCD2Lx5M7q6utDd3Q0AaG1tHffvWltbtfdN5JZbbkFtba32Z9asWYZ+HkRERAdq8qY7ifw1dkiSVMTTEBERERGVeJEIAB544AHIsowZM2bA6XTi9ttvx4UXXgirNf2M64F3rGVZnvLO9vXXX49AIKD92bt3r2HnJyIimkhmJxFHzYiIiIioFJR8kWjBggV49tlnMTIygr179+Lll19GPB7HvHnz0NbWBgAHdQ319vYe1F2Uyel0wu/3j/tDRERkpgZPukjEzWZEREREVApKvkgkeDwetLe3Y2hoCH/9619x7rnnaoWijRs3apeLxWJ49tlnsXLlyiKeloiIaGpOmxU+lw0AO4mIiIiIqDTYin2A6fz1r3+FLMs49NBDsXPnTvz7v/87Dj30UFx22WWQJAlXX301br75ZixatAiLFi3CzTffDLfbjQsvvLDYRyciIppSk9eJUCQBv6vkfx0TERERURUo+XulgUAA119/Pfbt24eGhgacd955+P73vw+7XXnW9brrrsPY2BiuuOIKDA0NYfny5fjb3/4Gn89X5JMTERFNrcnrwK7+MDuJiIiIiKgkSLIsy8U+RLEFg0HU1tYiEAgwn4iIiEzz5Qdew4Z3unHFqgW4bv1hxT4OEREREVWgXGoeZZNJREREVGkOa1e6Xhe1eot8EiIiIiKiMhg3IyIiqlRXnbYIH1/SjkUtLBIRERERUfGxSERERFQkVouEQ1qZoUdEREREpYHjZkRERERERERExCIRERERERERERGxSERERERERERERGCRiIiIiIiIiIiIwCIRERERERERERGBRSIiIiIiIiIiIgKLREREREREREREBBaJiIiIiIiIiIgILBIRERERERERERFYJCIiIiIiIiIiIrBIREREREREREREYJGIiIiIiIiIiIjAIhEREREREREREYFFIiIiIiIiIiIiAotEREREREREREQEFomIiIiIiIiIiAgsEhEREREREREREVgkIiIiIiIiIiIisEhERERERERERERgkYiIiIiIiIiIiMAiERERERERERERAbAV+wClQJZlAEAwGCzySYiIiIiIiIiI9CNqHaL2MRUWiQCEQiEAwKxZs4p8EiIiIiIiIiIi/YVCIdTW1k55GUnOppRU4VKpFDo7O+Hz+SBJUlHOEAwGMWvWLOzduxd+v78oZyAqVbx9EE2NtxGiqfE2QjQ13kaIJlcJtw9ZlhEKhdDR0QGLZerUIXYSAbBYLJg5c2axjwEA8Pv9ZfuNR2Q03j6IpsbbCNHUeBshmhpvI0STK/fbx3QdRAKDq4mIiIiIiIiIiEUiIiIiIiIiIiJikahkOJ1O3HDDDXA6ncU+ClHJ4e2DaGq8jRBNjbcRoqnxNkI0uWq7fTC4moiIiIiIiIiI2ElEREREREREREQsEhEREREREREREVgkIiIiIiIiIiIisEhERERERERERERgkUg3t9xyC4477jj4fD60tLTgk5/8JN5///1xl5FlGTfeeCM6OjpQU1ODVatW4Z133hl3mV/84hdYtWoV/H4/JEnC8PDwQR9r+/btOPfcc9HU1AS/348TTzwRzzzzjJGfHlHBzLyNbNmyBWvXrkVdXR0aGxvxxS9+ESMjI0Z+ekQF0eP2MTg4iKuuugqHHnoo3G43Zs+eja997WsIBALjrmdoaAgXXXQRamtrUVtbi4suumjC2xFRKTHzNvL9738fK1euhNvtRl1dnRmfHlHBzLqN7N69G5dffjnmzZuHmpoaLFiwADfccANisZhpnytRPsz8PXLOOedg9uzZcLlcaG9vx0UXXYTOzk5TPk89sEikk2effRZf/epX8dJLL2Hjxo1IJBJYt24dwuGwdpkf/vCHuPXWW3HnnXfilVdeQVtbG9auXYtQKKRdZnR0FOvXr8d3vvOdST/WWWedhUQigaeffhqvvfYajjnmGJx99tno7u429HMkKoRZt5HOzk6sWbMGCxcuxObNm7Fhwwa88847uPTSS43+FInypsfto7OzE52dnfjRj36Et956C/feey82bNiAyy+/fNzHuvDCC7F161Zs2LABGzZswNatW3HRRReZ+vkS5crM20gsFsNnP/tZfOUrXzH1cyQqhFm3kW3btiGVSuHuu+/GO++8g9tuuw133XXXlI9diEqBmb9HVq9ejUcffRTvv/8+HnvsMXzwwQf4zGc+Y+rnWxCZDNHb2ysDkJ999llZlmU5lUrJbW1t8g9+8APtMpFIRK6trZXvuuuug/79M888IwOQh4aGxr29r69PBiA/99xz2tuCwaAMQH7qqaeM+WSIDGDUbeTuu++WW1pa5GQyqb3t9ddflwHIO3bsMOaTIdJZobcP4dFHH5UdDoccj8dlWZbld999VwYgv/TSS9plXnzxRRmAvG3bNoM+GyL9GXUbyXTPPffItbW1up+dyAxm3EaEH/7wh/K8efP0OzyRCcy8jTz55JOyJElyLBbT7xMwEDuJDCJazhoaGgAAu3btQnd3N9atW6ddxul04tRTT8ULL7yQ9fU2NjZi8eLFuP/++xEOh5FIJHD33XejtbUVxx57rL6fBJGBjLqNRKNROBwOWCzpH281NTUAgE2bNulxdCLD6XX7CAQC8Pv9sNlsAIAXX3wRtbW1WL58uXaZE044AbW1tTndzoiKzajbCFGlMPM2EggEtI9DVC7Muo0MDg7iN7/5DVauXAm73a7jZ2AcFokMIMsyrrnmGpx00kk48sgjAUAbBWttbR132dbW1pzGxCRJwsaNG/H666/D5/PB5XLhtttuw4YNGzg3T2XDyNvIaaedhu7ubvzv//2/EYvFMDQ0pLVAd3V16fQZEBlHr9vHwMAAbrrpJnzpS1/S3tbd3Y2WlpaDLtvS0sKRZSobRt5GiCqBmbeRDz74AHfccQe+/OUv63R6IuOZcRv51re+BY/Hg8bGRuzZswdPPvmkzp+FcVgkMsCVV16JN998Ew8//PBB75MkadzfZVk+6G1TkWUZV1xxBVpaWvD888/j5Zdfxrnnnouzzz6bD4CpbBh5GzniiCNw33334cc//jHcbjfa2towf/58tLa2wmq1Fnx2IqPpcfsIBoM466yzcPjhh+OGG26Y8jqmuh6iUmT0bYSo3Jl1G+ns7MT69evx2c9+Fv/6r/+qz+GJTGDGbeTf//3f8frrr+Nvf/sbrFYrLr74YsiyrN8nYSAWiXR21VVX4Q9/+AOeeeYZzJw5U3t7W1sbABxUhezt7T2oWjmVp59+Gn/605/wyCOP4MQTT8SyZcvws5/9DDU1Nbjvvvv0+SSIDGT0bQRQgnm7u7uxf/9+DAwM4MYbb0RfXx/mzZtX+CdAZCA9bh+hUAjr16+H1+vFE088Ma61ua2tDT09PQd93L6+vpxvZ0TFYPRthKjcmXUb6ezsxOrVq7FixQr84he/MOAzITKGWbeRpqYmHHLIIVi7di0eeeQR/PnPf8ZLL71kwGekPxaJdCLLMq688ko8/vjjePrppw96MDpv3jy0tbVh48aN2ttisRieffZZrFy5MuuPMzo6CgDj8lbE31OpVAGfAZGxzLqNZGptbYXX68Vvf/tbuFwurF27tqDPgcgoet0+gsEg1q1bB4fDgT/84Q9wuVzjrmfFihUIBAJ4+eWXtbdt3rwZgUAg79sZkRnMuo0QlSszbyP79+/HqlWrsGzZMtxzzz0HPS4hKkXF/D0iOoii0ahOn42xmNKnk69+9at46KGH8OSTT8Ln82kVyNraWtTU1ECSJFx99dW4+eabsWjRIixatAg333wz3G43LrzwQu16uru70d3djZ07dwIA3nrrLfh8PsyePRsNDQ1YsWIF6uvrcckll+B73/seampq8Mtf/hK7du3CWWedVZTPnSgbZt1GAODOO+/EypUr4fV6sXHjRvz7v/87fvCDHzC3i0qWHrePUCiEdevWYXR0FA8++CCCwSCCwSAAoLm5GVarFYsXL8b69evxb//2b7j77rsBAF/84hdx9tln49BDDy3OJ0+UBbNuIwCwZ88eDA4OYs+ePUgmk9i6dSsAYOHChfB6veZ/8kRZMOs20tnZiVWrVmH27Nn40Y9+hL6+Pu0MohODqBSZdRt5+eWX8fLLL+Okk05CfX09PvzwQ3zve9/DggULsGLFiqJ9/jkxc5VaJQMw4Z977rlHu0wqlZJvuOEGua2tTXY6nfIpp5wiv/XWW+Ou54Ybbpj2el555RV53bp1ckNDg+zz+eQTTjhB/vOf/2zSZ0qUHzNvIxdddJHc0NAgOxwO+aijjpLvv/9+kz5Lovzocft45plnJr2eXbt2aZcbGBiQv/CFL8g+n0/2+XzyF77wBXloaMi8T5YoD2beRi655JIJL/PMM8+Y9wkT5cis28g999wz6WWISplZt5E333xTXr16tdzQ0CA7nU557ty58pe//GV53759Jn/G+ZNkuUzSk4iIiIiIiIiIyDAcICUiIiIiIiIiIhaJiIiIiIiIiIiIRSIiIiIiIiIiIgKLREREREREREREBBaJiIiIiIiIiIgILBIRERERERERERFYJCIiIiIiIiIiIrBIREREREREREREYJGIiIiIiIiIiIjAIhERERFRXi699FJIkgRJkmC329Ha2oq1a9fi17/+NVKpVNbXc++996Kurs64gxIRERFliUUiIiIiojytX78eXV1d2L17N/7yl79g9erV+PrXv46zzz4biUSi2McjIiIiygmLRERERER5cjqdaGtrw4wZM7Bs2TJ85zvfwZNPPom//OUvuPfeewEAt956K5YsWQKPx4NZs2bhiiuuwMjICADgH//4By677DIEAgGtK+nGG28EAMRiMVx33XWYMWMGPB4Pli9fjn/84x/F+USJiIioKrBIRERERKSj0047DUcffTQef/xxAIDFYsHtt9+Ot99+G/fddx+efvppXHfddQCAlStX4ic/+Qn8fj+6urrQ1dWFa6+9FgBw2WWX4Z///CceeeQRvPnmm/jsZz+L9evXY8eOHUX73IiIiKiySbIsy8U+BBEREVG5ufTSSzE8PIzf//73B73vggsuwJtvvol33333oPf993//N77yla+gv78fgJJJdPXVV2N4eFi7zAcffIBFixZh37596Ojo0N6+Zs0aHH/88bj55pt1/3yIiIiIbMU+ABEREVGlkWUZkiQBAJ555hncfPPNePfddxEMBpFIJBCJRBAOh+HxeCb891u2bIEsyzjkkEPGvT0ajaKxsdHw8xMREVF1YpGIiIiISGfvvfce5s2bh48++ggf//jH8eUvfxk33XQTGhoasGnTJlx++eWIx+OT/vtUKgWr1YrXXnsNVqt13Pu8Xq/RxyciIqIqxSIRERERkY6efvppvPXWW/jGN76BV199FYlEAj/+8Y9hsShRkI8++ui4yzscDiSTyXFvW7p0KZLJJHp7e3HyySebdnYiIiKqbiwSEREREeUpGo2iu7sbyWQSPT092LBhA2655RacffbZuPjii/HWW28hkUjgjjvuwCc+8Qn885//xF133TXuOubOnYuRkRH8/e9/x9FHHw23241DDjkEX/jCF3DxxRfjxz/+MZYuXYr+/n48/fTTWLJkCT7+8Y8X6TMmIiKiSsbtZkRERER52rBhA9rb2zF37lysX78ezzzzDG6//XY8+eSTsFqtOOaYY3Drrbfif/2v/4UjjzwSv/nNb3DLLbeMu46VK1fiy1/+Mj73uc+hubkZP/zhDwEA99xzDy6++GJ885vfxKGHHopzzjkHmzdvxqxZs4rxqRIREVEV4HYzIiIiIiIiIiJiJxEREREREREREbFIREREREREREREYJGIiIiIiIiIiIjAIhEREREREREREYFFIiIiIiIiIiIiAotEREREREREREQEFomIiIiIiIiIiAgsEhEREREREREREVgkIiIiIiIiIiIisEhERERERERERERgkYiIiIiIiIiIiAD8//5Do+5LnlPuAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1400x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualisation to check the forecasting\n",
    "\n",
    "plt.figure(figsize = (14, 7))\n",
    "plt.plot(train_data.index, train_data['Software_9'], label = 'Training Data')\n",
    "plt.plot(test_data.index, test_data['Software_9'], label = 'Testing Data')\n",
    "plt.plot(test_data.index, arima_forcast_9, label = 'Software_9 Forecast Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Software_9 Sales')\n",
    "plt.title('ARIMA model')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6dbbd74a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Forecast</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-31</th>\n",
       "      <td>130.305472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-28</th>\n",
       "      <td>129.463877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-31</th>\n",
       "      <td>129.390817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-30</th>\n",
       "      <td>129.384474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-31</th>\n",
       "      <td>129.383924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-06-30</th>\n",
       "      <td>129.383876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-07-31</th>\n",
       "      <td>129.383872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-08-31</th>\n",
       "      <td>129.383871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-09-30</th>\n",
       "      <td>129.383871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-10-31</th>\n",
       "      <td>129.383871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-30</th>\n",
       "      <td>129.383871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-31</th>\n",
       "      <td>129.383871</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Forecast\n",
       "2023-01-31  130.305472\n",
       "2023-02-28  129.463877\n",
       "2023-03-31  129.390817\n",
       "2023-04-30  129.384474\n",
       "2023-05-31  129.383924\n",
       "2023-06-30  129.383876\n",
       "2023-07-31  129.383872\n",
       "2023-08-31  129.383871\n",
       "2023-09-30  129.383871\n",
       "2023-10-31  129.383871\n",
       "2023-11-30  129.383871\n",
       "2023-12-31  129.383871"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we check what will happen in the next 12 months\n",
    "\n",
    "forecast_12_steps = 12\n",
    "future_arima_forecast_9 = arima_fit_9.get_forecast(steps = forecast_12_steps)\n",
    "future_arima_df_9 = pd.DataFrame({\n",
    "    'Forecast': future_arima_forecast_9.predicted_mean\n",
    "})\n",
    "future_arima_df_9.index = pd.date_range(start = test_data.index[-1] + pd.Timedelta(days = 30), periods = forecast_12_steps, freq = 'M')\n",
    "\n",
    "future_arima_df_9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "abe2b708",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n",
      "  warn('Too few observations to estimate starting parameters%s.'\n"
     ]
    }
   ],
   "source": [
    "#We move on with SARIMAX model\n",
    "\n",
    "#We can start building the model\n",
    "\n",
    "sarimax_model_9 = SARIMAX(train_data['Software_9'],\n",
    "                       order = (1, 1, 1),\n",
    "                       seasonal_order = (1, 1, 1, 12))\n",
    "sarimax_9_fit = sarimax_model_9.fit(disp = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "efa13d24",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Forecasting using SARIMAX\n",
    "\n",
    "sarimax_forecast_9 = sarimax_9_fit.forecast(steps = len(test_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d03f989d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualisation to check the forecasting\n",
    "\n",
    "plt.figure(figsize = (14, 7))\n",
    "plt.plot(train_data.index, train_data['Software_9'], label = 'Training Data')\n",
    "plt.plot(test_data.index, test_data['Software_9'], label = 'Testing Data')\n",
    "plt.plot(test_data.index, sarimax_forecast_9, label = 'Forecast Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Software_9 Sales')\n",
    "plt.title('SARIMAX model')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f64039bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Forecast</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-31</th>\n",
       "      <td>128.180297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-28</th>\n",
       "      <td>129.602939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-31</th>\n",
       "      <td>133.631256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-30</th>\n",
       "      <td>142.102749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-31</th>\n",
       "      <td>135.583068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-06-30</th>\n",
       "      <td>122.925104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-07-31</th>\n",
       "      <td>129.405212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-08-31</th>\n",
       "      <td>134.763890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-09-30</th>\n",
       "      <td>131.008395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-10-31</th>\n",
       "      <td>123.329201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-30</th>\n",
       "      <td>116.202726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-31</th>\n",
       "      <td>130.167141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Forecast\n",
       "2023-01-31  128.180297\n",
       "2023-02-28  129.602939\n",
       "2023-03-31  133.631256\n",
       "2023-04-30  142.102749\n",
       "2023-05-31  135.583068\n",
       "2023-06-30  122.925104\n",
       "2023-07-31  129.405212\n",
       "2023-08-31  134.763890\n",
       "2023-09-30  131.008395\n",
       "2023-10-31  123.329201\n",
       "2023-11-30  116.202726\n",
       "2023-12-31  130.167141"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we check what will happen in the next 12 months\n",
    "\n",
    "forecast_12_steps = 12\n",
    "future_sarimax_forecast_9 = sarimax_9_fit.get_forecast(steps = forecast_12_steps)\n",
    "future_sarimax_9_df = pd.DataFrame({\n",
    "    'Forecast': future_sarimax_forecast_9.predicted_mean\n",
    "})\n",
    "future_sarimax_9_df.index = pd.date_range(start = test_data.index[-1] + pd.Timedelta(days = 30), periods = forecast_12_steps, freq = 'M')\n",
    "\n",
    "future_sarimax_9_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "97fc058a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.069395182340466"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We calculate the MAPE\n",
    "\n",
    "#ARIMA\n",
    "\n",
    "non_zero_test_arima_9 = test_data['Software_9'] !=0\n",
    "filtered_test_arima_9 = test_data['Software_9'][non_zero_test_arima_9]\n",
    "filtered_forecast_arima_9 = arima_forcast_9[non_zero_test_arima_9]\n",
    "arima_mape_9 = np.mean(np.abs((filtered_test_arima_9 - filtered_forecast_arima_9)/filtered_test_arima_9))*100\n",
    "arima_mape_9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c9ab9e5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.673315020169214"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#SARIMAX\n",
    "\n",
    "non_zero_test_sarimax_9 = test_data['Software_9'] !=0\n",
    "filtered_test_sarimax_9 = test_data['Software_9'][non_zero_test_sarimax_9]\n",
    "filtered_forecast_sarimax_9 = sarimax_forecast_9[non_zero_test_sarimax_9]\n",
    "sarimax_mape_9 = np.mean(np.abs((filtered_test_sarimax_9 - filtered_forecast_sarimax_9)/filtered_test_sarimax_9))*100\n",
    "sarimax_mape_9"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61b1eae7",
   "metadata": {},
   "source": [
    "# #Software_12 forecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "37424f01",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We start with ARIMA model\n",
    "\n",
    "#Split the data into training and test set\n",
    "\n",
    "train_data = df_Software_12[:int(0.8*len(df_Software_12))]\n",
    "test_data = df_Software_12[int(0.8*len(df_Software_12)):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ca96ce72",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n",
      "  warn('Non-invertible starting MA parameters found.'\n"
     ]
    }
   ],
   "source": [
    "#Building the ARIMA model\n",
    "\n",
    "arima_model_12 = ARIMA(train_data['Software_12'], order = (1, 1, 1))\n",
    "arima_fit_12 = arima_model_12.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2fd46cc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Forecast for testing set\n",
    "\n",
    "arima_forcast_12 = arima_fit_12.forecast(steps = len(test_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d59bf141",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualisation to check the forecasting\n",
    "\n",
    "plt.figure(figsize = (14, 7))\n",
    "plt.plot(train_data.index, train_data['Software_12'], label = 'Training Data')\n",
    "plt.plot(test_data.index, test_data['Software_12'], label = 'Testing Data')\n",
    "plt.plot(test_data.index, arima_forcast_12, label = 'Software_12 Forecast Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Software_12 Sales')\n",
    "plt.title('ARIMA model')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cc9e7157",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Forecast</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-31</th>\n",
       "      <td>123.203674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-28</th>\n",
       "      <td>122.219476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-31</th>\n",
       "      <td>122.052363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-30</th>\n",
       "      <td>122.023987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-31</th>\n",
       "      <td>122.019169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-06-30</th>\n",
       "      <td>122.018351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-07-31</th>\n",
       "      <td>122.018212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-08-31</th>\n",
       "      <td>122.018189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-09-30</th>\n",
       "      <td>122.018185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-10-31</th>\n",
       "      <td>122.018184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-30</th>\n",
       "      <td>122.018184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-31</th>\n",
       "      <td>122.018184</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Forecast\n",
       "2023-01-31  123.203674\n",
       "2023-02-28  122.219476\n",
       "2023-03-31  122.052363\n",
       "2023-04-30  122.023987\n",
       "2023-05-31  122.019169\n",
       "2023-06-30  122.018351\n",
       "2023-07-31  122.018212\n",
       "2023-08-31  122.018189\n",
       "2023-09-30  122.018185\n",
       "2023-10-31  122.018184\n",
       "2023-11-30  122.018184\n",
       "2023-12-31  122.018184"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we check what will happen in the next 12 months\n",
    "\n",
    "forecast_12_steps = 12\n",
    "future_arima_forecast_12 = arima_fit_12.get_forecast(steps = forecast_12_steps)\n",
    "future_arima_df_12 = pd.DataFrame({\n",
    "    'Forecast': future_arima_forecast_12.predicted_mean\n",
    "})\n",
    "future_arima_df_12.index = pd.date_range(start = test_data.index[-1] + pd.Timedelta(days = 30), periods = forecast_12_steps, freq = 'M')\n",
    "\n",
    "future_arima_df_12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fd4d28ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n",
      "  warn('Non-stationary starting autoregressive parameters'\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n",
      "  warn('Non-invertible starting MA parameters found.'\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n",
      "  warn('Too few observations to estimate starting parameters%s.'\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
     ]
    }
   ],
   "source": [
    "#We move on with SARIMAX model\n",
    "\n",
    "#We can start building the model\n",
    "\n",
    "sarimax_model_12 = SARIMAX(train_data['Software_12'],\n",
    "                       order = (1, 1, 1),\n",
    "                       seasonal_order = (1, 1, 1, 12))\n",
    "sarimax_12_fit = sarimax_model_12.fit(disp = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "9c346062",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Forecasting using SARIMAX\n",
    "\n",
    "sarimax_forecast_12 = sarimax_12_fit.forecast(steps = len(test_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "4de61c45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualisation to check the forecasting\n",
    "\n",
    "plt.figure(figsize = (14, 7))\n",
    "plt.plot(train_data.index, train_data['Software_12'], label = 'Training Data')\n",
    "plt.plot(test_data.index, test_data['Software_12'], label = 'Testing Data')\n",
    "plt.plot(test_data.index, sarimax_forecast_12, label = 'Forecast Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Software_12 Sales')\n",
    "plt.title('SARIMAX model')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "bd1f8b59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Forecast</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-31</th>\n",
       "      <td>123.266108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-28</th>\n",
       "      <td>113.673323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-31</th>\n",
       "      <td>121.987419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-30</th>\n",
       "      <td>124.564122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-31</th>\n",
       "      <td>124.388909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-06-30</th>\n",
       "      <td>119.069564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-07-31</th>\n",
       "      <td>135.750061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-08-31</th>\n",
       "      <td>130.388248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-09-30</th>\n",
       "      <td>120.613741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-10-31</th>\n",
       "      <td>121.137893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-30</th>\n",
       "      <td>127.090412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-31</th>\n",
       "      <td>126.768263</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Forecast\n",
       "2023-01-31  123.266108\n",
       "2023-02-28  113.673323\n",
       "2023-03-31  121.987419\n",
       "2023-04-30  124.564122\n",
       "2023-05-31  124.388909\n",
       "2023-06-30  119.069564\n",
       "2023-07-31  135.750061\n",
       "2023-08-31  130.388248\n",
       "2023-09-30  120.613741\n",
       "2023-10-31  121.137893\n",
       "2023-11-30  127.090412\n",
       "2023-12-31  126.768263"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we check what will happen in the next 12 months\n",
    "\n",
    "forecast_12_steps = 12\n",
    "future_sarimax_forecast_12 = sarimax_12_fit.get_forecast(steps = forecast_12_steps)\n",
    "future_sarimax_12_df = pd.DataFrame({\n",
    "    'Forecast': future_sarimax_forecast_12.predicted_mean\n",
    "})\n",
    "future_sarimax_12_df.index = pd.date_range(start = test_data.index[-1] + pd.Timedelta(days = 30), periods = forecast_12_steps, freq = 'M')\n",
    "\n",
    "future_sarimax_12_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3365f2e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.788258751852817"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We calculate the MAPE\n",
    "\n",
    "#ARIMA\n",
    "\n",
    "non_zero_test_arima_12 = test_data['Software_12'] !=0\n",
    "filtered_test_arima_12 = test_data['Software_12'][non_zero_test_arima_12]\n",
    "filtered_forecast_arima_12 = arima_forcast_12[non_zero_test_arima_12]\n",
    "arima_mape_12 = np.mean(np.abs((filtered_test_arima_12 - filtered_forecast_arima_12)/filtered_test_arima_12))*100\n",
    "arima_mape_12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f3d5c509",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.419978836840015"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#SARIMAX\n",
    "\n",
    "non_zero_test_sarimax_12 = test_data['Software_12'] !=0\n",
    "filtered_test_sarimax_12 = test_data['Software_12'][non_zero_test_sarimax_12]\n",
    "filtered_forecast_sarimax_12 = sarimax_forecast_12[non_zero_test_sarimax_12]\n",
    "sarimax_mape_12 = np.mean(np.abs((filtered_test_sarimax_12 - filtered_forecast_sarimax_12)/filtered_test_sarimax_12))*100\n",
    "sarimax_mape_12"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "285921ac",
   "metadata": {},
   "source": [
    "# #Software_13 forecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "c33a6ff1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We start with ARIMA model\n",
    "\n",
    "#Split the data into training and test set\n",
    "\n",
    "train_data = df_Software_13[:int(0.8*len(df_Software_13))]\n",
    "test_data = df_Software_13[int(0.8*len(df_Software_13)):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "087e7372",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n"
     ]
    }
   ],
   "source": [
    "#Building the ARIMA model\n",
    "\n",
    "arima_model_13 = ARIMA(train_data['Software_13'], order = (1, 1, 1))\n",
    "arima_fit_13 = arima_model_13.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "64fd1e7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Forecast for testing set\n",
    "\n",
    "arima_forcast_13 = arima_fit_13.forecast(steps = len(test_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "7d6433c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualisation to check the forecasting\n",
    "\n",
    "plt.figure(figsize = (14, 7))\n",
    "plt.plot(train_data.index, train_data['Software_13'], label = 'Training Data')\n",
    "plt.plot(test_data.index, test_data['Software_13'], label = 'Testing Data')\n",
    "plt.plot(test_data.index, arima_forcast_13, label = 'Software_13 Forecast Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Software_13 Sales')\n",
    "plt.title('ARIMA model')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "07dabbeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Forecast</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-31</th>\n",
       "      <td>127.712907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-28</th>\n",
       "      <td>120.992725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-31</th>\n",
       "      <td>118.871212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-30</th>\n",
       "      <td>118.201466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-31</th>\n",
       "      <td>117.990032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-06-30</th>\n",
       "      <td>117.923283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-07-31</th>\n",
       "      <td>117.902211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-08-31</th>\n",
       "      <td>117.895559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-09-30</th>\n",
       "      <td>117.893459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-10-31</th>\n",
       "      <td>117.892796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-30</th>\n",
       "      <td>117.892587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-31</th>\n",
       "      <td>117.892521</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Forecast\n",
       "2023-01-31  127.712907\n",
       "2023-02-28  120.992725\n",
       "2023-03-31  118.871212\n",
       "2023-04-30  118.201466\n",
       "2023-05-31  117.990032\n",
       "2023-06-30  117.923283\n",
       "2023-07-31  117.902211\n",
       "2023-08-31  117.895559\n",
       "2023-09-30  117.893459\n",
       "2023-10-31  117.892796\n",
       "2023-11-30  117.892587\n",
       "2023-12-31  117.892521"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we check what will happen in the next 12 months\n",
    "\n",
    "forecast_12_steps = 12\n",
    "future_arima_forecast_13 = arima_fit_13.get_forecast(steps = forecast_12_steps)\n",
    "future_arima_df_13 = pd.DataFrame({\n",
    "    'Forecast': future_arima_forecast_13.predicted_mean\n",
    "})\n",
    "future_arima_df_13.index = pd.date_range(start = test_data.index[-1] + pd.Timedelta(days = 30), periods = forecast_12_steps, freq = 'M')\n",
    "\n",
    "future_arima_df_13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "07ef6a34",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency M will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "/Users/jasondonohoe/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n",
      "  warn('Too few observations to estimate starting parameters%s.'\n"
     ]
    }
   ],
   "source": [
    "#We move on with SARIMAX model\n",
    "\n",
    "#We can start building the model\n",
    "\n",
    "sarimax_model_13 = SARIMAX(train_data['Software_13'],\n",
    "                       order = (1, 1, 1),\n",
    "                       seasonal_order = (1, 1, 1, 12))\n",
    "sarimax_13_fit = sarimax_model_13.fit(disp = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2a5f5a3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Forecasting using SARIMAX\n",
    "\n",
    "sarimax_forecast_13 = sarimax_13_fit.forecast(steps = len(test_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "a5e6b243",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualisation to check the forecasting\n",
    "\n",
    "plt.figure(figsize = (14, 7))\n",
    "plt.plot(train_data.index, train_data['Software_13'], label = 'Training Data')\n",
    "plt.plot(test_data.index, test_data['Software_13'], label = 'Testing Data')\n",
    "plt.plot(test_data.index, sarimax_forecast_13, label = 'Forecast Data')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Software_13 Sales')\n",
    "plt.title('SARIMAX model')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "9d00e783",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Forecast</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-31</th>\n",
       "      <td>135.653268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-28</th>\n",
       "      <td>127.907955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-31</th>\n",
       "      <td>128.706655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-30</th>\n",
       "      <td>112.264025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-31</th>\n",
       "      <td>114.304422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-06-30</th>\n",
       "      <td>128.191983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-07-31</th>\n",
       "      <td>121.034927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-08-31</th>\n",
       "      <td>125.536093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-09-30</th>\n",
       "      <td>117.786269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-10-31</th>\n",
       "      <td>113.674107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-11-30</th>\n",
       "      <td>125.095824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-31</th>\n",
       "      <td>135.829319</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Forecast\n",
       "2023-01-31  135.653268\n",
       "2023-02-28  127.907955\n",
       "2023-03-31  128.706655\n",
       "2023-04-30  112.264025\n",
       "2023-05-31  114.304422\n",
       "2023-06-30  128.191983\n",
       "2023-07-31  121.034927\n",
       "2023-08-31  125.536093\n",
       "2023-09-30  117.786269\n",
       "2023-10-31  113.674107\n",
       "2023-11-30  125.095824\n",
       "2023-12-31  135.829319"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we check what will happen in the next 12 months\n",
    "\n",
    "forecast_12_steps = 12\n",
    "future_sarimax_forecast_13 = sarimax_13_fit.get_forecast(steps = forecast_12_steps)\n",
    "future_sarimax_13_df = pd.DataFrame({\n",
    "    'Forecast': future_sarimax_forecast_13.predicted_mean\n",
    "})\n",
    "future_sarimax_13_df.index = pd.date_range(start = test_data.index[-1] + pd.Timedelta(days = 30), periods = forecast_12_steps, freq = 'M')\n",
    "\n",
    "future_sarimax_13_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "1732eee4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.120784746471768"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We calculate the MAPE\n",
    "\n",
    "#ARIMA\n",
    "\n",
    "non_zero_test_arima_13 = test_data['Software_13'] !=0\n",
    "filtered_test_arima_13 = test_data['Software_13'][non_zero_test_arima_13]\n",
    "filtered_forecast_arima_13 = arima_forcast_13[non_zero_test_arima_13]\n",
    "arima_mape_13 = np.mean(np.abs((filtered_test_arima_13 - filtered_forecast_arima_13)/filtered_test_arima_13))*100\n",
    "arima_mape_13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "cb07a769",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.785207281869523"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#SARIMAX\n",
    "\n",
    "non_zero_test_sarimax_13 = test_data['Software_13'] !=0\n",
    "filtered_test_sarimax_13 = test_data['Software_13'][non_zero_test_sarimax_13]\n",
    "filtered_forecast_sarimax_13 = sarimax_forecast_13[non_zero_test_sarimax_13]\n",
    "sarimax_mape_13 = np.mean(np.abs((filtered_test_sarimax_13 - filtered_forecast_sarimax_13)/filtered_test_sarimax_13))*100\n",
    "sarimax_mape_13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc175611",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "918f73b6",
   "metadata": {},
   "source": [
    "# Classification and Anomaly Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "4b6d93aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import isolation forest\n",
    "\n",
    "from sklearn.ensemble import IsolationForest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "cfe64a34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Issue_ID</th>\n",
       "      <th>Issue_Type</th>\n",
       "      <th>System_Component</th>\n",
       "      <th>Customer_Impact</th>\n",
       "      <th>Time_to_Resolve_hrs</th>\n",
       "      <th>Reported_By</th>\n",
       "      <th>Priority</th>\n",
       "      <th>Previous_Occurrences</th>\n",
       "      <th>Issue_Reported_Month</th>\n",
       "      <th>Resolved</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>8544</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>43.117583</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>2</td>\n",
       "      <td>Jul</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6569</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>71.695013</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Low</td>\n",
       "      <td>6</td>\n",
       "      <td>May</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>3990</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>31.621253</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4</td>\n",
       "      <td>Mar</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3504</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>66.329435</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>0</td>\n",
       "      <td>Sep</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1587</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>25.168704</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2</td>\n",
       "      <td>Jun</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>995</td>\n",
       "      <td>8162</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>69.735378</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>0</td>\n",
       "      <td>Mar</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>996</td>\n",
       "      <td>7241</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>32.881160</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Medium</td>\n",
       "      <td>1</td>\n",
       "      <td>Jan</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>997</td>\n",
       "      <td>9399</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>68.118630</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Medium</td>\n",
       "      <td>7</td>\n",
       "      <td>Feb</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>998</td>\n",
       "      <td>6633</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>48.892633</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Urgent</td>\n",
       "      <td>8</td>\n",
       "      <td>May</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>999</td>\n",
       "      <td>6755</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>22.063461</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>1</td>\n",
       "      <td>Oct</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  Issue_ID  Issue_Type  System_Component  Customer_Impact  \\\n",
       "0             0      8544           0                 3                0   \n",
       "1             1      6569           2                 1                1   \n",
       "2             2      3990           2                 3                2   \n",
       "3             3      3504           2                 2                1   \n",
       "4             4      1587           2                 3                2   \n",
       "..          ...       ...         ...               ...              ...   \n",
       "995         995      8162           1                 2                2   \n",
       "996         996      7241           0                 3                0   \n",
       "997         997      9399           2                 0                1   \n",
       "998         998      6633           2                 2                2   \n",
       "999         999      6755           0                 2                2   \n",
       "\n",
       "     Time_to_Resolve_hrs       Reported_By Priority  Previous_Occurrences  \\\n",
       "0              43.117583  Automated_System     High                     2   \n",
       "1              71.695013          Customer      Low                     6   \n",
       "2              31.621253  Automated_System   Medium                     4   \n",
       "3              66.329435  Automated_System   Medium                     0   \n",
       "4              25.168704  Automated_System   Medium                     2   \n",
       "..                   ...               ...      ...                   ...   \n",
       "995            69.735378  Automated_System     High                     0   \n",
       "996            32.881160          Customer   Medium                     1   \n",
       "997            68.118630          Customer   Medium                     7   \n",
       "998            48.892633          Customer   Urgent                     8   \n",
       "999            22.063461  Automated_System     High                     1   \n",
       "\n",
       "    Issue_Reported_Month  Resolved  \n",
       "0                    Jul      True  \n",
       "1                    May     False  \n",
       "2                    Mar     False  \n",
       "3                    Sep      True  \n",
       "4                    Jun     False  \n",
       "..                   ...       ...  \n",
       "995                  Mar     False  \n",
       "996                  Jan     False  \n",
       "997                  Feb     False  \n",
       "998                  May      True  \n",
       "999                  Oct      True  \n",
       "\n",
       "[1000 rows x 11 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Using dataset df_classification\n",
    "\n",
    "df_classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "59c4b686",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_class = df_classification[['Issue_Type', 'System_Component', 'Customer_Impact', 'Priority']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "2173f65d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Issue_Type</th>\n",
       "      <th>System_Component</th>\n",
       "      <th>Customer_Impact</th>\n",
       "      <th>Priority</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Issue_Type  System_Component  Customer_Impact Priority\n",
       "0           0                 3                0     High\n",
       "1           2                 1                1      Low\n",
       "2           2                 3                2   Medium\n",
       "3           2                 2                1   Medium\n",
       "4           2                 3                2   Medium"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_class.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "e769ea75",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We need to encode the categorical variables\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "097db6c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/7r/rs48kvt11nb366b4wwn6gtyc0000gn/T/ipykernel_66299/3619405341.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_class['Issue_Type'] = label_encoder_class.fit_transform(df_class['Issue_Type'])\n",
      "/var/folders/7r/rs48kvt11nb366b4wwn6gtyc0000gn/T/ipykernel_66299/3619405341.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_class['System_Component'] = label_encoder_class.fit_transform(df_class['System_Component'])\n",
      "/var/folders/7r/rs48kvt11nb366b4wwn6gtyc0000gn/T/ipykernel_66299/3619405341.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_class['Customer_Impact'] = label_encoder_class.fit_transform(df_class['Customer_Impact'])\n",
      "/var/folders/7r/rs48kvt11nb366b4wwn6gtyc0000gn/T/ipykernel_66299/3619405341.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_class['Priority'] = label_encoder_class.fit_transform(df_class['Priority'])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Issue_Type</th>\n",
       "      <th>System_Component</th>\n",
       "      <th>Customer_Impact</th>\n",
       "      <th>Priority</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Issue_Type  System_Component  Customer_Impact  Priority\n",
       "0           0                 3                0         0\n",
       "1           2                 1                1         1\n",
       "2           2                 3                2         2\n",
       "3           2                 2                1         2\n",
       "4           2                 3                2         2"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_encoder_class = LabelEncoder()\n",
    "df_class['Issue_Type'] = label_encoder_class.fit_transform(df_class['Issue_Type'])\n",
    "df_class['System_Component'] = label_encoder_class.fit_transform(df_class['System_Component'])\n",
    "df_class['Customer_Impact'] = label_encoder_class.fit_transform(df_class['Customer_Impact'])\n",
    "df_class['Priority'] = label_encoder_class.fit_transform(df_class['Priority'])\n",
    "\n",
    "df_class.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "77a80abe",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We define X and Y\n",
    "\n",
    "x = df_class.iloc[:, :-1].values\n",
    "y = df_class.iloc[:, -1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "2991436d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting into training and test set\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "3820b79d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature scaling\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "sc = StandardScaler()\n",
    "x_train = sc.fit_transform(x_train)\n",
    "x_test = sc.transform(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "e7d21bf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, n_estimators=10, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, n_estimators=10, random_state=0)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(criterion='entropy', n_estimators=10, random_state=0)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We are ready to prepare the data fro Random Forest Classifer\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\n",
    "classifier.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "bd88f2ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2 0]\n",
      " [3 3]\n",
      " [1 1]\n",
      " [0 2]\n",
      " [1 1]\n",
      " [2 2]\n",
      " [2 3]\n",
      " [2 0]\n",
      " [3 1]\n",
      " [3 3]\n",
      " [2 1]\n",
      " [2 3]\n",
      " [2 1]\n",
      " [2 1]\n",
      " [3 2]\n",
      " [1 3]\n",
      " [1 0]\n",
      " [2 0]\n",
      " [0 0]\n",
      " [0 1]\n",
      " [3 3]\n",
      " [3 3]\n",
      " [2 3]\n",
      " [2 2]\n",
      " [0 0]\n",
      " [2 2]\n",
      " [2 2]\n",
      " [2 2]\n",
      " [2 0]\n",
      " [2 1]\n",
      " [0 1]\n",
      " [0 1]\n",
      " [1 1]\n",
      " [2 0]\n",
      " [2 0]\n",
      " [1 0]\n",
      " [3 0]\n",
      " [2 0]\n",
      " [3 3]\n",
      " [3 1]\n",
      " [2 2]\n",
      " [3 2]\n",
      " [0 0]\n",
      " [2 1]\n",
      " [1 1]\n",
      " [2 1]\n",
      " [1 0]\n",
      " [1 3]\n",
      " [3 2]\n",
      " [2 3]\n",
      " [2 2]\n",
      " [1 2]\n",
      " [1 2]\n",
      " [2 1]\n",
      " [0 0]\n",
      " [2 3]\n",
      " [2 1]\n",
      " [3 1]\n",
      " [1 3]\n",
      " [3 2]\n",
      " [3 2]\n",
      " [1 2]\n",
      " [3 0]\n",
      " [2 3]\n",
      " [3 0]\n",
      " [3 3]\n",
      " [1 3]\n",
      " [1 3]\n",
      " [1 2]\n",
      " [2 1]\n",
      " [0 0]\n",
      " [2 1]\n",
      " [0 2]\n",
      " [0 1]\n",
      " [2 1]\n",
      " [0 2]\n",
      " [3 2]\n",
      " [3 0]\n",
      " [2 2]\n",
      " [2 1]\n",
      " [1 3]\n",
      " [3 2]\n",
      " [2 3]\n",
      " [2 3]\n",
      " [3 1]\n",
      " [2 0]\n",
      " [2 0]\n",
      " [0 2]\n",
      " [0 1]\n",
      " [2 1]\n",
      " [3 2]\n",
      " [3 0]\n",
      " [1 0]\n",
      " [1 0]\n",
      " [2 2]\n",
      " [1 1]\n",
      " [1 0]\n",
      " [0 0]\n",
      " [1 3]\n",
      " [1 2]\n",
      " [1 1]\n",
      " [3 3]\n",
      " [1 0]\n",
      " [2 0]\n",
      " [2 3]\n",
      " [0 2]\n",
      " [1 1]\n",
      " [1 2]\n",
      " [2 1]\n",
      " [1 3]\n",
      " [3 1]\n",
      " [1 3]\n",
      " [3 0]\n",
      " [3 1]\n",
      " [0 2]\n",
      " [2 3]\n",
      " [1 1]\n",
      " [3 0]\n",
      " [2 1]\n",
      " [3 0]\n",
      " [0 2]\n",
      " [2 0]\n",
      " [1 1]\n",
      " [2 1]\n",
      " [3 1]\n",
      " [0 3]\n",
      " [1 3]\n",
      " [2 0]\n",
      " [2 0]\n",
      " [1 2]\n",
      " [2 2]\n",
      " [3 0]\n",
      " [3 2]\n",
      " [2 1]\n",
      " [2 2]\n",
      " [1 0]\n",
      " [2 1]\n",
      " [2 0]\n",
      " [2 2]\n",
      " [3 1]\n",
      " [0 0]\n",
      " [2 2]\n",
      " [1 3]\n",
      " [1 2]\n",
      " [3 1]\n",
      " [3 1]\n",
      " [2 3]\n",
      " [1 2]\n",
      " [3 0]\n",
      " [1 2]\n",
      " [2 2]\n",
      " [3 1]\n",
      " [1 2]\n",
      " [1 2]\n",
      " [3 0]\n",
      " [3 3]\n",
      " [1 3]\n",
      " [2 1]\n",
      " [2 1]\n",
      " [3 2]\n",
      " [1 1]\n",
      " [1 1]\n",
      " [3 3]\n",
      " [1 2]\n",
      " [3 0]\n",
      " [2 2]\n",
      " [1 3]\n",
      " [2 1]\n",
      " [1 1]\n",
      " [1 0]\n",
      " [3 2]\n",
      " [1 3]\n",
      " [3 0]\n",
      " [3 2]\n",
      " [2 3]\n",
      " [1 2]\n",
      " [2 1]\n",
      " [1 0]\n",
      " [2 2]\n",
      " [1 3]\n",
      " [0 1]\n",
      " [1 0]\n",
      " [0 1]\n",
      " [1 0]\n",
      " [2 3]\n",
      " [3 1]\n",
      " [0 0]\n",
      " [1 0]\n",
      " [0 1]\n",
      " [3 3]\n",
      " [3 0]\n",
      " [2 3]\n",
      " [2 3]\n",
      " [0 0]\n",
      " [1 3]\n",
      " [2 2]\n",
      " [3 1]\n",
      " [1 2]\n",
      " [0 3]\n",
      " [3 2]\n",
      " [1 0]\n",
      " [3 1]\n",
      " [2 3]\n",
      " [2 3]\n",
      " [1 0]\n",
      " [0 1]\n",
      " [3 0]\n",
      " [0 0]\n",
      " [2 0]\n",
      " [0 2]\n",
      " [1 3]\n",
      " [1 0]\n",
      " [1 0]\n",
      " [2 1]\n",
      " [0 3]\n",
      " [3 0]\n",
      " [3 3]\n",
      " [0 3]\n",
      " [3 1]\n",
      " [2 2]\n",
      " [1 1]\n",
      " [0 1]\n",
      " [2 0]\n",
      " [1 3]\n",
      " [0 1]\n",
      " [1 3]\n",
      " [3 2]\n",
      " [1 1]\n",
      " [0 0]\n",
      " [1 0]\n",
      " [2 1]\n",
      " [2 1]\n",
      " [2 2]\n",
      " [2 0]\n",
      " [2 0]\n",
      " [3 2]\n",
      " [1 2]\n",
      " [1 0]\n",
      " [1 1]\n",
      " [2 1]\n",
      " [1 2]\n",
      " [0 0]\n",
      " [0 3]\n",
      " [2 2]\n",
      " [3 1]\n",
      " [2 1]\n",
      " [0 0]\n",
      " [2 2]\n",
      " [3 2]\n",
      " [0 0]]\n"
     ]
    }
   ],
   "source": [
    "#Compare test and training results and evaluate the model\n",
    "\n",
    "y_pred = classifier.predict(x_test)\n",
    "print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test), 1)),1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "36ba3b08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Confusion Matrix')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Confusion matrix\n",
    "\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "plt.figure(figsize = (10, 8))\n",
    "sns.heatmap(cm, annot = True, fmt = 'd', cmap = 'Oranges')\n",
    "plt.title('Confusion Matrix')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "8da0cc40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.244"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Evaluating accuracy\n",
    "\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a777d775",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "3dfc4e40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Issue_ID</th>\n",
       "      <th>Issue_Type</th>\n",
       "      <th>System_Component</th>\n",
       "      <th>Customer_Impact</th>\n",
       "      <th>Time_to_Resolve_hrs</th>\n",
       "      <th>Reported_By</th>\n",
       "      <th>Priority</th>\n",
       "      <th>Previous_Occurrences</th>\n",
       "      <th>Issue_Reported_Month</th>\n",
       "      <th>Resolved</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>8544</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>43.117583</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>2</td>\n",
       "      <td>Jul</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6569</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>71.695013</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Low</td>\n",
       "      <td>6</td>\n",
       "      <td>May</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>3990</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>31.621253</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4</td>\n",
       "      <td>Mar</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3504</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>66.329435</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>0</td>\n",
       "      <td>Sep</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1587</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>25.168704</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2</td>\n",
       "      <td>Jun</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Issue_ID  Issue_Type  System_Component  Customer_Impact  \\\n",
       "0           0      8544           0                 3                0   \n",
       "1           1      6569           2                 1                1   \n",
       "2           2      3990           2                 3                2   \n",
       "3           3      3504           2                 2                1   \n",
       "4           4      1587           2                 3                2   \n",
       "\n",
       "   Time_to_Resolve_hrs       Reported_By Priority  Previous_Occurrences  \\\n",
       "0            43.117583  Automated_System     High                     2   \n",
       "1            71.695013          Customer      Low                     6   \n",
       "2            31.621253  Automated_System   Medium                     4   \n",
       "3            66.329435  Automated_System   Medium                     0   \n",
       "4            25.168704  Automated_System   Medium                     2   \n",
       "\n",
       "  Issue_Reported_Month  Resolved  \n",
       "0                  Jul      True  \n",
       "1                  May     False  \n",
       "2                  Mar     False  \n",
       "3                  Sep      True  \n",
       "4                  Jun     False  "
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_classification.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "299f3bd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We need to encode the categorical variables\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "37cf34cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Issue_ID</th>\n",
       "      <th>Issue_Type</th>\n",
       "      <th>System_Component</th>\n",
       "      <th>Customer_Impact</th>\n",
       "      <th>Time_to_Resolve_hrs</th>\n",
       "      <th>Reported_By</th>\n",
       "      <th>Priority</th>\n",
       "      <th>Previous_Occurrences</th>\n",
       "      <th>Issue_Reported_Month</th>\n",
       "      <th>Resolved</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>8544</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>43.117583</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>2</td>\n",
       "      <td>Jul</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6569</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>71.695013</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Low</td>\n",
       "      <td>6</td>\n",
       "      <td>May</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>3990</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>31.621253</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>4</td>\n",
       "      <td>Mar</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3504</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>66.329435</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>0</td>\n",
       "      <td>Sep</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1587</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>25.168704</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2</td>\n",
       "      <td>Jun</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Issue_ID  Issue_Type  System_Component  Customer_Impact  \\\n",
       "0           0      8544           0                 3                0   \n",
       "1           1      6569           2                 1                1   \n",
       "2           2      3990           2                 3                2   \n",
       "3           3      3504           2                 2                1   \n",
       "4           4      1587           2                 3                2   \n",
       "\n",
       "   Time_to_Resolve_hrs       Reported_By Priority  Previous_Occurrences  \\\n",
       "0            43.117583  Automated_System     High                     2   \n",
       "1            71.695013          Customer      Low                     6   \n",
       "2            31.621253  Automated_System   Medium                     4   \n",
       "3            66.329435  Automated_System   Medium                     0   \n",
       "4            25.168704  Automated_System   Medium                     2   \n",
       "\n",
       "  Issue_Reported_Month  Resolved  \n",
       "0                  Jul      True  \n",
       "1                  May     False  \n",
       "2                  Mar     False  \n",
       "3                  Sep      True  \n",
       "4                  Jun     False  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_encoder = LabelEncoder()\n",
    "df_classification['Issue_Type'] = label_encoder.fit_transform(df_classification['Issue_Type'])\n",
    "df_classification['System_Component'] = label_encoder.fit_transform(df_classification['System_Component'])\n",
    "df_classification['Customer_Impact'] = label_encoder.fit_transform(df_classification['Customer_Impact'])\n",
    "df_classification.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "3ee4a0c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We select the variables that are relevant to detect anomalies\n",
    "\n",
    "X_anomaly = df_classification[['Issue_Type', 'System_Component', 'Customer_Impact']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "d46a73eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>IsolationForest(contamination=0.1, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">IsolationForest</label><div class=\"sk-toggleable__content\"><pre>IsolationForest(contamination=0.1, random_state=0)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "IsolationForest(contamination=0.1, random_state=0)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Train the anomaly detection model --> Isolation Forest\n",
    "\n",
    "anomaly_detector = IsolationForest(contamination = 0.10, random_state = 0)\n",
    "anomaly_detector.fit(X_anomaly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "3fcaa8c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Predict the anomalies\n",
    "\n",
    "df_classification['Anomaly'] = anomaly_detector.predict(X_anomaly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "1d3b36ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Issue_ID</th>\n",
       "      <th>Issue_Type</th>\n",
       "      <th>System_Component</th>\n",
       "      <th>Customer_Impact</th>\n",
       "      <th>Time_to_Resolve_hrs</th>\n",
       "      <th>Reported_By</th>\n",
       "      <th>Priority</th>\n",
       "      <th>Previous_Occurrences</th>\n",
       "      <th>Issue_Reported_Month</th>\n",
       "      <th>Resolved</th>\n",
       "      <th>Anomaly</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>8544</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>43.117583</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>2</td>\n",
       "      <td>Jul</td>\n",
       "      <td>True</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>8096</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>9.105996</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>0</td>\n",
       "      <td>Sep</td>\n",
       "      <td>False</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>2674</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>9.018558</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Urgent</td>\n",
       "      <td>9</td>\n",
       "      <td>Apr</td>\n",
       "      <td>False</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>30</td>\n",
       "      <td>6063</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14.076086</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Low</td>\n",
       "      <td>9</td>\n",
       "      <td>Mar</td>\n",
       "      <td>False</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>9831</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>28.514479</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Medium</td>\n",
       "      <td>8</td>\n",
       "      <td>Mar</td>\n",
       "      <td>False</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>913</td>\n",
       "      <td>4922</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>7.031757</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Medium</td>\n",
       "      <td>6</td>\n",
       "      <td>Aug</td>\n",
       "      <td>True</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>930</th>\n",
       "      <td>930</td>\n",
       "      <td>2481</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.402498</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Urgent</td>\n",
       "      <td>3</td>\n",
       "      <td>Nov</td>\n",
       "      <td>False</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>977</td>\n",
       "      <td>8644</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>42.948450</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>High</td>\n",
       "      <td>9</td>\n",
       "      <td>Oct</td>\n",
       "      <td>False</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>987</td>\n",
       "      <td>6788</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18.541076</td>\n",
       "      <td>Automated_System</td>\n",
       "      <td>Urgent</td>\n",
       "      <td>9</td>\n",
       "      <td>Jan</td>\n",
       "      <td>False</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>996</td>\n",
       "      <td>7241</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>32.881160</td>\n",
       "      <td>Customer</td>\n",
       "      <td>Medium</td>\n",
       "      <td>1</td>\n",
       "      <td>Jan</td>\n",
       "      <td>False</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>94 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  Issue_ID  Issue_Type  System_Component  Customer_Impact  \\\n",
       "0             0      8544           0                 3                0   \n",
       "14           14      8096           1                 1                2   \n",
       "19           19      2674           0                 3                2   \n",
       "30           30      6063           3                 0                0   \n",
       "32           32      9831           1                 1                2   \n",
       "..          ...       ...         ...               ...              ...   \n",
       "913         913      4922           0                 3                0   \n",
       "930         930      2481           3                 0                0   \n",
       "977         977      8644           3                 0                0   \n",
       "987         987      6788           2                 0                0   \n",
       "996         996      7241           0                 3                0   \n",
       "\n",
       "     Time_to_Resolve_hrs       Reported_By Priority  Previous_Occurrences  \\\n",
       "0              43.117583  Automated_System     High                     2   \n",
       "14              9.105996  Automated_System     High                     0   \n",
       "19              9.018558          Customer   Urgent                     9   \n",
       "30             14.076086  Automated_System      Low                     9   \n",
       "32             28.514479          Customer   Medium                     8   \n",
       "..                   ...               ...      ...                   ...   \n",
       "913             7.031757          Customer   Medium                     6   \n",
       "930             2.402498          Customer   Urgent                     3   \n",
       "977            42.948450  Automated_System     High                     9   \n",
       "987            18.541076  Automated_System   Urgent                     9   \n",
       "996            32.881160          Customer   Medium                     1   \n",
       "\n",
       "    Issue_Reported_Month  Resolved  Anomaly  \n",
       "0                    Jul      True       -1  \n",
       "14                   Sep     False       -1  \n",
       "19                   Apr     False       -1  \n",
       "30                   Mar     False       -1  \n",
       "32                   Mar     False       -1  \n",
       "..                   ...       ...      ...  \n",
       "913                  Aug      True       -1  \n",
       "930                  Nov     False       -1  \n",
       "977                  Oct     False       -1  \n",
       "987                  Jan     False       -1  \n",
       "996                  Jan     False       -1  \n",
       "\n",
       "[94 rows x 12 columns]"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Display the results --> -1 there is an anomaly, +1 no anomaly\n",
    "\n",
    "anomaly_results = df_classification[df_classification['Anomaly'] == -1]\n",
    "anomaly_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "4df1081e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(94, 12)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "anomaly_results.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6080961",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ca980b1d",
   "metadata": {},
   "source": [
    "# Recommendation System"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "b4790f0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>InvoiceNo</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Most popular item of the day</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Date</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>CustomerID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>85123A</td>\n",
       "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
       "      <td>6.0</td>\n",
       "      <td>01/12/2018</td>\n",
       "      <td>2.55</td>\n",
       "      <td>43009.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>71053</td>\n",
       "      <td>WHITE METAL LANTERN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>02/12/2018</td>\n",
       "      <td>3.39</td>\n",
       "      <td>79874.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>84406B</td>\n",
       "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
       "      <td>8.0</td>\n",
       "      <td>03/12/2018</td>\n",
       "      <td>2.75</td>\n",
       "      <td>45061.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>84029G</td>\n",
       "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
       "      <td>6.0</td>\n",
       "      <td>04/12/2018</td>\n",
       "      <td>3.39</td>\n",
       "      <td>47110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>84029E</td>\n",
       "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
       "      <td>6.0</td>\n",
       "      <td>05/12/2018</td>\n",
       "      <td>3.39</td>\n",
       "      <td>77834.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1623</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1624</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1625</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1626</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1627</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1628 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      InvoiceNo ItemCode         Most popular item of the day  Quantity  \\\n",
       "0           1.0   85123A   WHITE HANGING HEART T-LIGHT HOLDER       6.0   \n",
       "1           2.0    71053                  WHITE METAL LANTERN       6.0   \n",
       "2           3.0   84406B       CREAM CUPID HEARTS COAT HANGER       8.0   \n",
       "3           4.0   84029G  KNITTED UNION FLAG HOT WATER BOTTLE       6.0   \n",
       "4           5.0   84029E       RED WOOLLY HOTTIE WHITE HEART.       6.0   \n",
       "...         ...      ...                                  ...       ...   \n",
       "1623        NaN      NaN                                  NaN       NaN   \n",
       "1624        NaN      NaN                                  NaN       NaN   \n",
       "1625        NaN      NaN                                  NaN       NaN   \n",
       "1626        NaN      NaN                                  NaN       NaN   \n",
       "1627        NaN      NaN                                  NaN       NaN   \n",
       "\n",
       "            Date  UnitPrice  CustomerID  \n",
       "0     01/12/2018       2.55     43009.0  \n",
       "1     02/12/2018       3.39     79874.0  \n",
       "2     03/12/2018       2.75     45061.0  \n",
       "3     04/12/2018       3.39     47110.0  \n",
       "4     05/12/2018       3.39     77834.0  \n",
       "...          ...        ...         ...  \n",
       "1623         NaN        NaN         NaN  \n",
       "1624         NaN        NaN         NaN  \n",
       "1625         NaN        NaN         NaN  \n",
       "1626         NaN        NaN         NaN  \n",
       "1627         NaN        NaN         NaN  \n",
       "\n",
       "[1628 rows x 7 columns]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Using dataset df_retail_list\n",
    "\n",
    "df_retail_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "7179beca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1628 entries, 0 to 1627\n",
      "Data columns (total 7 columns):\n",
      " #   Column                        Non-Null Count  Dtype  \n",
      "---  ------                        --------------  -----  \n",
      " 0   InvoiceNo                     1000 non-null   float64\n",
      " 1   ItemCode                      1000 non-null   object \n",
      " 2   Most popular item of the day  999 non-null    object \n",
      " 3   Quantity                      1000 non-null   float64\n",
      " 4   Date                          1000 non-null   object \n",
      " 5   UnitPrice                     1000 non-null   float64\n",
      " 6   CustomerID                    1000 non-null   float64\n",
      "dtypes: float64(4), object(3)\n",
      "memory usage: 89.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_retail_list.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "0f91f46f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "InvoiceNo                       628\n",
       "ItemCode                        628\n",
       "Most popular item of the day    629\n",
       "Quantity                        628\n",
       "Date                            628\n",
       "UnitPrice                       628\n",
       "CustomerID                      628\n",
       "dtype: int64"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking for missing values again\n",
    "\n",
    "df_retail_list.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "43b29dd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We drop the rows where the customer ID is missing --> It makes noise in our future matrix construction\n",
    "\n",
    "df_retail_list.dropna(subset=['CustomerID'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "f9eb30d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We can start with the recommendation system\n",
    "#We convert the customer ID into string to facilitate the algroithm\n",
    "\n",
    "df_retail_list['CustomerID'] = df_retail_list['CustomerID'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "9794d7aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We need to identify the values that are greater than 0 (a return will show up as a negative number)\n",
    "#Apply to price and units\n",
    "\n",
    "df_retail_list = df_retail_list[(df_retail_list['Quantity']>0) & (df_retail_list['UnitPrice']>0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "0bf4b95f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>ItemCode</th>\n",
       "      <th>10002</th>\n",
       "      <th>10125</th>\n",
       "      <th>10133</th>\n",
       "      <th>15056BL</th>\n",
       "      <th>15056N</th>\n",
       "      <th>16014</th>\n",
       "      <th>16016</th>\n",
       "      <th>16237</th>\n",
       "      <th>16238</th>\n",
       "      <th>16258A</th>\n",
       "      <th>...</th>\n",
       "      <th>90059E</th>\n",
       "      <th>90129F</th>\n",
       "      <th>90185C</th>\n",
       "      <th>90199C</th>\n",
       "      <th>90200A</th>\n",
       "      <th>90200B</th>\n",
       "      <th>90200C</th>\n",
       "      <th>90200D</th>\n",
       "      <th>90210B</th>\n",
       "      <th>POST</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CustomerID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10563.0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10666.0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10745.0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10807.0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11068.0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 586 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "ItemCode    10002  10125  10133  15056BL  15056N  16014  16016  16237  16238  \\\n",
       "CustomerID                                                                     \n",
       "10563.0       0.0    0.0    0.0      0.0     0.0    0.0    0.0    0.0    0.0   \n",
       "10666.0       0.0    0.0    0.0      0.0     0.0    0.0    0.0    0.0    0.0   \n",
       "10745.0       0.0    0.0    0.0      0.0     0.0    0.0    0.0    0.0    0.0   \n",
       "10807.0       0.0    0.0    0.0      0.0     0.0    0.0    0.0    0.0    0.0   \n",
       "11068.0       0.0    0.0    0.0      0.0     0.0    0.0    0.0    0.0    0.0   \n",
       "\n",
       "ItemCode    16258A  ...  90059E  90129F  90185C  90199C  90200A  90200B  \\\n",
       "CustomerID          ...                                                   \n",
       "10563.0        0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "10666.0        0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "10745.0        0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "10807.0        0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "11068.0        0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "\n",
       "ItemCode    90200C  90200D  90210B  POST  \n",
       "CustomerID                                \n",
       "10563.0        0.0     0.0     0.0   0.0  \n",
       "10666.0        0.0     0.0     0.0   0.0  \n",
       "10745.0        0.0     0.0     0.0   0.0  \n",
       "10807.0        0.0     0.0     0.0   0.0  \n",
       "11068.0        0.0     0.0     0.0   0.0  \n",
       "\n",
       "[5 rows x 586 columns]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Now we will create the User_item matrix --> Understanding the behaviour of the user regarding the items\n",
    "\n",
    "user_item_matrix = df_retail_list.pivot_table(index = 'CustomerID', columns = 'ItemCode', values = 'Quantity', aggfunc = 'sum').fillna(0)\n",
    "user_item_matrix.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "1e693aec",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We create the similarity matrix\n",
    "\n",
    "user_similarity = cosine_similarity(user_item_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "557fa5cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Display the similarities in a dataframe to make it easier to read\n",
    "\n",
    "user_similarity_df = pd.DataFrame(user_similarity, index = user_item_matrix.index, columns = user_item_matrix.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "13982d4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>CustomerID</th>\n",
       "      <th>10563.0</th>\n",
       "      <th>10666.0</th>\n",
       "      <th>10745.0</th>\n",
       "      <th>10807.0</th>\n",
       "      <th>11068.0</th>\n",
       "      <th>11442.0</th>\n",
       "      <th>11623.0</th>\n",
       "      <th>11851.0</th>\n",
       "      <th>12345.0</th>\n",
       "      <th>12769.0</th>\n",
       "      <th>...</th>\n",
       "      <th>99039.0</th>\n",
       "      <th>99059.0</th>\n",
       "      <th>99124.0</th>\n",
       "      <th>99195.0</th>\n",
       "      <th>99208.0</th>\n",
       "      <th>99295.0</th>\n",
       "      <th>99451.0</th>\n",
       "      <th>99580.0</th>\n",
       "      <th>99612.0</th>\n",
       "      <th>99866.0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CustomerID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10563.0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10666.0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10745.0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10807.0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.041631</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11068.0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 793 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "CustomerID  10563.0  10666.0  10745.0  10807.0  11068.0  11442.0  11623.0  \\\n",
       "CustomerID                                                                  \n",
       "10563.0         1.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "10666.0         0.0      1.0      0.0      0.0      0.0      0.0      0.0   \n",
       "10745.0         0.0      0.0      1.0      0.0      0.0      0.0      0.0   \n",
       "10807.0         0.0      0.0      0.0      1.0      0.0      0.0      0.0   \n",
       "11068.0         0.0      0.0      0.0      0.0      1.0      0.0      0.0   \n",
       "\n",
       "CustomerID  11851.0   12345.0  12769.0  ...  99039.0  99059.0  99124.0  \\\n",
       "CustomerID                              ...                              \n",
       "10563.0         0.0  0.000000      0.0  ...      0.0      0.0      0.0   \n",
       "10666.0         0.0  0.000000      1.0  ...      0.0      0.0      0.0   \n",
       "10745.0         0.0  0.000000      0.0  ...      0.0      0.0      0.0   \n",
       "10807.0         0.0  0.041631      0.0  ...      0.0      0.0      0.0   \n",
       "11068.0         0.0  0.000000      0.0  ...      0.0      0.0      0.0   \n",
       "\n",
       "CustomerID  99195.0  99208.0  99295.0  99451.0  99580.0  99612.0  99866.0  \n",
       "CustomerID                                                                 \n",
       "10563.0         0.0      0.0      0.0      0.0      0.0      0.0      0.0  \n",
       "10666.0         0.0      0.0      0.0      0.0      0.0      0.0      0.0  \n",
       "10745.0         0.0      0.0      0.0      0.0      0.0      0.0      0.0  \n",
       "10807.0         0.0      0.0      0.0      0.0      0.0      0.0      0.0  \n",
       "11068.0         0.0      0.0      0.0      0.0      0.0      0.0      0.0  \n",
       "\n",
       "[5 rows x 793 columns]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_similarity_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "ad681720",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Rating prediction using the matrix user_item\n",
    "\n",
    "def predict_ratings_user_based(user_item_matrix, user_similarity):\n",
    "    mean_user_rating = user_item_matrix.mean(axis = 1).values\n",
    "    rating_diff = (user_item_matrix.values - mean_user_rating[:, np.newaxis])\n",
    "    pred = mean_user_rating[:, np.newaxis] + user_similarity.dot(rating_diff)/np.array([np.abs(user_similarity).sum(axis = 1)]).T\n",
    "    return pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "8eab9aa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.        ,  0.        ,  0.        , ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [ 0.01962457,  0.01962457,  0.01962457, ...,  0.01962457,\n",
       "         0.01962457,  0.01962457],\n",
       "       [ 0.01138035,  0.01138035,  0.01138035, ...,  0.01138035,\n",
       "         0.01138035,  0.01138035],\n",
       "       ...,\n",
       "       [-0.02167458, -0.02167458, -0.02167458, ..., -0.02167458,\n",
       "        -0.02167458, -0.02167458],\n",
       "       [-0.0016948 , -0.0016948 , -0.0016948 , ..., -0.0016948 ,\n",
       "        -0.0016948 , -0.0016948 ],\n",
       "       [-0.00838519, -0.00838519, -0.00838519, ..., -0.00838519,\n",
       "        -0.00838519, -0.00838519]])"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicted ratings\n",
    "\n",
    "user_predicted_ratings = predict_ratings_user_based(user_item_matrix, user_similarity)\n",
    "user_predicted_ratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "c1da87ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "User-user collaborative error: 17.370611329377493\n"
     ]
    }
   ],
   "source": [
    "#Checking the performance of the algorithm\n",
    "\n",
    "def rmse(prediction, ground_truth):\n",
    "    prediction = prediction[ground_truth.nonzero()].flatten()\n",
    "    ground_truth = ground_truth[ground_truth.nonzero()].flatten()\n",
    "    return sqrt(mean_squared_error(prediction, ground_truth))\n",
    "\n",
    "print('User-user collaborative error:', rmse(user_predicted_ratings, user_item_matrix.values))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "ef959375",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We create an item similarity matrix\n",
    "\n",
    "item_similarity = cosine_similarity(user_item_matrix.T)\n",
    "item_similarity_df = pd.DataFrame(item_similarity, index = user_item_matrix.columns, columns = user_item_matrix.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "f8c53e62",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Item-item collaborative error: 17.38133841207562\n"
     ]
    }
   ],
   "source": [
    "#Rating for the item collaboration\n",
    "\n",
    "def predict_ratings_item_based(user_item_matrix, item_similarity):\n",
    "    pred = user_item_matrix.values.dot(item_similarity)/np.array([np.abs(item_similarity).sum(axis=1)])\n",
    "    return pred\n",
    "\n",
    "#Predict the ratings\n",
    "\n",
    "item_predicted_ratings = predict_ratings_item_based(user_item_matrix, item_similarity)\n",
    "\n",
    "#We print the accuracy\n",
    "print('Item-item collaborative error:', rmse(item_predicted_ratings, user_item_matrix.values))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8bc9c45",
   "metadata": {},
   "source": [
    "In both cases, the errors seem very high. The rmse must be close to zero. The closer to zero, the better. So, we will apply the SVD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "cc465ed2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.sparse.linalg import svds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "f1f63c24",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalise the data to have the same unit of measurement \n",
    "\n",
    "user_ratings_mean = np.mean(user_item_matrix.values, axis = 1)\n",
    "ratings_demeaned = user_item_matrix.values - user_ratings_mean.reshape(-1, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "b0c1ea7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Singular Value Decomposition (SVD)\n",
    "\n",
    "U, sigma, Vt = svds(ratings_demeaned, k = 50)\n",
    "sigma = np.diag(sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "ddcd6fe3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Rating prediction\n",
    "\n",
    "all_user_predicted_ratings = np.dot(np.dot(U, sigma), Vt) + user_ratings_mean.reshape(-1, 1)\n",
    "predicted_ratings_df = pd.DataFrame(all_user_predicted_ratings, columns = user_item_matrix.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "3eebd202",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVD collaborative filtering 8.890331207685191\n"
     ]
    }
   ],
   "source": [
    "#Evaluation of the model after SVD\n",
    "\n",
    "print('SVD collaborative filtering', rmse(predicted_ratings_df.values, user_item_matrix.values))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "2202c6dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now, with these results, we can move on to the recommendations. Let's say that we want to recommend 3 items to 3 random customers\n",
    "\n",
    "def recommended_items(user_id, user_item_matrix, predicted_ratings_df, num_recommendations = 3):\n",
    "    user_idx = user_item_matrix.index.get_loc(user_id) #sorting the user predicted ratings\n",
    "    sorted_user_ratings = predicted_ratings_df.iloc[user_idx].sort_values(ascending = False)\n",
    "    user_data = user_item_matrix.loc[user_id] #appending or merging the user data with the sorted ratings\n",
    "    user_full = (user_data[user_data > 0]).sort_values(ascending = False)\n",
    "    recommendations = sorted_user_ratings[~sorted_user_ratings.index.isin(user_full.index)]\n",
    "    return recommendations.head(num_recommendations) #Recommendation of items that the user did not buy yet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "57fe2a54",
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize_ratings(predicted_ratings):\n",
    "    min_rating = predicted_ratings.min()\n",
    "    max_rating = predicted_ratings.max()\n",
    "    probabilities = (predicted_ratings - min_rating) / (max_rating - min_rating)\n",
    "    return probabilities"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ecdd78f",
   "metadata": {},
   "source": [
    "# Customer 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "5cce3fd3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'62639.0'"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_user_index = np.random.choice(user_item_matrix.index) #Select a random user\n",
    "\n",
    "customer_id = random_user_index\n",
    "customer_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "d4ea8aa7",
   "metadata": {},
   "outputs": [],
   "source": [
    "recommendations = recommended_items(random_user_index, user_item_matrix, predicted_ratings_df, num_recommendations = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "1d515909",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recommendations for customer ID: 62639.0\n",
      "ItemCode\n",
      "22174    1.000\n",
      "84678    0.925\n",
      "22963    0.000\n",
      "Name: 462, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#Normalise the predicted ratings to get probabilities\n",
    "recommendation_probabilities = normalize_ratings(recommendations)\n",
    "\n",
    "# Display the recommendations and their probabilities\n",
    "print(\"Recommendations for customer ID:\", customer_id)\n",
    "print(recommendation_probabilities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "daa8d1ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/7r/rs48kvt11nb366b4wwn6gtyc0000gn/T/ipykernel_66299/969637083.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_retail_list['ItemCode'] = df_retail_list['ItemCode'].astype(str)\n"
     ]
    }
   ],
   "source": [
    "#We convert the stock codes into strings\n",
    "\n",
    "df_retail_list['ItemCode'] = df_retail_list['ItemCode'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "bf1e2643",
   "metadata": {},
   "outputs": [],
   "source": [
    "item_codes = ['22174', '22963', '84678']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "d6e136cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>InvoiceNo</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Most popular item of the day</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Date</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>CustomerID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>216.0</td>\n",
       "      <td>22963</td>\n",
       "      <td>JAM JAR WITH GREEN LID</td>\n",
       "      <td>48.0</td>\n",
       "      <td>04/07/2019</td>\n",
       "      <td>0.72</td>\n",
       "      <td>45453.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>233.0</td>\n",
       "      <td>22174</td>\n",
       "      <td>PHOTO CUBE</td>\n",
       "      <td>48.0</td>\n",
       "      <td>21/07/2019</td>\n",
       "      <td>1.48</td>\n",
       "      <td>51633.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>733</th>\n",
       "      <td>734.0</td>\n",
       "      <td>84678</td>\n",
       "      <td>CLASSICAL ROSE SMALL VASE</td>\n",
       "      <td>48.0</td>\n",
       "      <td>03/12/2020</td>\n",
       "      <td>1.25</td>\n",
       "      <td>93628.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     InvoiceNo ItemCode Most popular item of the day  Quantity        Date  \\\n",
       "215      216.0    22963       JAM JAR WITH GREEN LID      48.0  04/07/2019   \n",
       "232      233.0    22174                   PHOTO CUBE      48.0  21/07/2019   \n",
       "733      734.0    84678    CLASSICAL ROSE SMALL VASE      48.0  03/12/2020   \n",
       "\n",
       "     UnitPrice CustomerID  \n",
       "215       0.72    45453.0  \n",
       "232       1.48    51633.0  \n",
       "733       1.25    93628.0  "
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We display the results in a dataframe\n",
    "\n",
    "filtered_data = df_retail_list[df_retail_list['ItemCode'].isin(['22174', '22963', '84678'])]\n",
    "filtered_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "2debc44e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We create a dataframe with the probability of buying the recommended items\n",
    "\n",
    "prob_df = pd.DataFrame(list(recommendation_probabilities.items()), columns = ['ItemCode', 'Probability']) #Creating the likelihood of buying the recommendations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "63d67f3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "prob_df[\"ItemCode\"] = prob_df[\"ItemCode\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "763a6d5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Most popular item of the day</th>\n",
       "      <th>Probability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22963</td>\n",
       "      <td>JAM JAR WITH GREEN LID</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22174</td>\n",
       "      <td>PHOTO CUBE</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84678</td>\n",
       "      <td>CLASSICAL ROSE SMALL VASE</td>\n",
       "      <td>0.925</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ItemCode Most popular item of the day  Probability\n",
       "0    22963       JAM JAR WITH GREEN LID        0.000\n",
       "1    22174                   PHOTO CUBE        1.000\n",
       "2    84678    CLASSICAL ROSE SMALL VASE        0.925"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_result_df = pd.merge(filtered_data[['ItemCode', 'Most popular item of the day']].drop_duplicates(), prob_df, on = 'ItemCode')\n",
    "final_result_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55824b7d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3a92bb6b",
   "metadata": {},
   "source": [
    "# Customer 2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "d1f681dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'19242.0'"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_user_index = np.random.choice(user_item_matrix.index) #Select a random user\n",
    "\n",
    "customer_id_2 = random_user_index\n",
    "customer_id_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "a4fb87fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "recommendations = recommended_items(random_user_index, user_item_matrix, predicted_ratings_df, num_recommendations = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "fd6f1f63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recommendations for customer ID: 19242.0\n",
      "ItemCode\n",
      "22174    1.000000\n",
      "84678    0.961957\n",
      "22963    0.000000\n",
      "Name: 62, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#Normalise the predicted ratings to get probabilities\n",
    "recommendation_probabilities = normalize_ratings(recommendations)\n",
    "\n",
    "# Display the recommendations and their probabilities\n",
    "print(\"Recommendations for customer ID:\", customer_id_2)\n",
    "print(recommendation_probabilities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "37b039a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/7r/rs48kvt11nb366b4wwn6gtyc0000gn/T/ipykernel_66299/969637083.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_retail_list['ItemCode'] = df_retail_list['ItemCode'].astype(str)\n"
     ]
    }
   ],
   "source": [
    "#We convert the stock codes into strings\n",
    "\n",
    "df_retail_list['ItemCode'] = df_retail_list['ItemCode'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "44f4b3f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "item_codes = ['22174', '22963', '84678']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "4e436bab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>InvoiceNo</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Most popular item of the day</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Date</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>CustomerID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>216.0</td>\n",
       "      <td>22963</td>\n",
       "      <td>JAM JAR WITH GREEN LID</td>\n",
       "      <td>48.0</td>\n",
       "      <td>04/07/2019</td>\n",
       "      <td>0.72</td>\n",
       "      <td>45453.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>233.0</td>\n",
       "      <td>22174</td>\n",
       "      <td>PHOTO CUBE</td>\n",
       "      <td>48.0</td>\n",
       "      <td>21/07/2019</td>\n",
       "      <td>1.48</td>\n",
       "      <td>51633.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>733</th>\n",
       "      <td>734.0</td>\n",
       "      <td>84678</td>\n",
       "      <td>CLASSICAL ROSE SMALL VASE</td>\n",
       "      <td>48.0</td>\n",
       "      <td>03/12/2020</td>\n",
       "      <td>1.25</td>\n",
       "      <td>93628.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     InvoiceNo ItemCode Most popular item of the day  Quantity        Date  \\\n",
       "215      216.0    22963       JAM JAR WITH GREEN LID      48.0  04/07/2019   \n",
       "232      233.0    22174                   PHOTO CUBE      48.0  21/07/2019   \n",
       "733      734.0    84678    CLASSICAL ROSE SMALL VASE      48.0  03/12/2020   \n",
       "\n",
       "     UnitPrice CustomerID  \n",
       "215       0.72    45453.0  \n",
       "232       1.48    51633.0  \n",
       "733       1.25    93628.0  "
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We display the results in a dataframe\n",
    "\n",
    "filtered_data = df_retail_list[df_retail_list['ItemCode'].isin(['22174', '22963', '84678'])]\n",
    "filtered_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "a4b53bdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We create a dataframe with the probability of buying the recommended items\n",
    "\n",
    "prob_df = pd.DataFrame(list(recommendation_probabilities.items()), columns = ['ItemCode', 'Probability']) #Creating the likelihood of buying the recommendations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "a4879aff",
   "metadata": {},
   "outputs": [],
   "source": [
    "prob_df[\"ItemCode\"] = prob_df[\"ItemCode\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "c9579a85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Most popular item of the day</th>\n",
       "      <th>Probability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22963</td>\n",
       "      <td>JAM JAR WITH GREEN LID</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22174</td>\n",
       "      <td>PHOTO CUBE</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84678</td>\n",
       "      <td>CLASSICAL ROSE SMALL VASE</td>\n",
       "      <td>0.961957</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ItemCode Most popular item of the day  Probability\n",
       "0    22963       JAM JAR WITH GREEN LID     0.000000\n",
       "1    22174                   PHOTO CUBE     1.000000\n",
       "2    84678    CLASSICAL ROSE SMALL VASE     0.961957"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_result_df = pd.merge(filtered_data[['ItemCode', 'Most popular item of the day']].drop_duplicates(), prob_df, on = 'ItemCode')\n",
    "final_result_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dabd1c35",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3733622",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ea19f73a",
   "metadata": {},
   "source": [
    "# Customer 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "3170bded",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'51313.0'"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_user_index = np.random.choice(user_item_matrix.index) #Select a random user\n",
    "\n",
    "customer_id_3 = random_user_index\n",
    "customer_id_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "3b6a5134",
   "metadata": {},
   "outputs": [],
   "source": [
    "recommendations = recommended_items(random_user_index, user_item_matrix, predicted_ratings_df, num_recommendations = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "4044db1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recommendations for customer ID: 51313.0\n",
      "ItemCode\n",
      "22632    1.000000e+00\n",
      "22962    2.611411e-14\n",
      "22059    0.000000e+00\n",
      "Name: 365, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#Normalise the predicted ratings to get probabilities\n",
    "recommendation_probabilities = normalize_ratings(recommendations)\n",
    "\n",
    "# Display the recommendations and their probabilities\n",
    "print(\"Recommendations for customer ID:\", customer_id_3)\n",
    "print(recommendation_probabilities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "417a2127",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/7r/rs48kvt11nb366b4wwn6gtyc0000gn/T/ipykernel_66299/969637083.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_retail_list['ItemCode'] = df_retail_list['ItemCode'].astype(str)\n"
     ]
    }
   ],
   "source": [
    "#We convert the stock codes into strings\n",
    "\n",
    "df_retail_list['ItemCode'] = df_retail_list['ItemCode'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "8ed0c35b",
   "metadata": {},
   "outputs": [],
   "source": [
    "item_codes = ['22632', '22962', '22059']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "4de2389f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>InvoiceNo</th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Most popular item of the day</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>Date</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>CustomerID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED POLKA DOT</td>\n",
       "      <td>6.0</td>\n",
       "      <td>09/12/2018</td>\n",
       "      <td>1.85</td>\n",
       "      <td>90129.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED POLKA DOT</td>\n",
       "      <td>6.0</td>\n",
       "      <td>17/01/2019</td>\n",
       "      <td>1.85</td>\n",
       "      <td>34900.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>85.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED POLKA DOT</td>\n",
       "      <td>6.0</td>\n",
       "      <td>23/02/2019</td>\n",
       "      <td>1.85</td>\n",
       "      <td>22672.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>214</th>\n",
       "      <td>215.0</td>\n",
       "      <td>22962</td>\n",
       "      <td>JAM JAR WITH PINK LID</td>\n",
       "      <td>48.0</td>\n",
       "      <td>03/07/2019</td>\n",
       "      <td>0.72</td>\n",
       "      <td>70024.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>258.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED RETROSPOT</td>\n",
       "      <td>96.0</td>\n",
       "      <td>15/08/2019</td>\n",
       "      <td>1.85</td>\n",
       "      <td>45538.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>305.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED RETROSPOT</td>\n",
       "      <td>12.0</td>\n",
       "      <td>01/10/2019</td>\n",
       "      <td>2.10</td>\n",
       "      <td>53809.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>316.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED POLKA DOT</td>\n",
       "      <td>6.0</td>\n",
       "      <td>12/10/2019</td>\n",
       "      <td>1.85</td>\n",
       "      <td>94797.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>433</th>\n",
       "      <td>434.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED POLKA DOT</td>\n",
       "      <td>6.0</td>\n",
       "      <td>07/02/2020</td>\n",
       "      <td>1.85</td>\n",
       "      <td>37705.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>664</th>\n",
       "      <td>665.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED RETROSPOT</td>\n",
       "      <td>3.0</td>\n",
       "      <td>25/09/2020</td>\n",
       "      <td>2.10</td>\n",
       "      <td>70973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>704</th>\n",
       "      <td>705.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED RETROSPOT</td>\n",
       "      <td>12.0</td>\n",
       "      <td>04/11/2020</td>\n",
       "      <td>2.10</td>\n",
       "      <td>81281.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>731</th>\n",
       "      <td>732.0</td>\n",
       "      <td>22059</td>\n",
       "      <td>CERAMIC STRAWBERRY DESIGN MUG</td>\n",
       "      <td>48.0</td>\n",
       "      <td>01/12/2020</td>\n",
       "      <td>1.25</td>\n",
       "      <td>46523.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>880.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED RETROSPOT</td>\n",
       "      <td>12.0</td>\n",
       "      <td>28/04/2021</td>\n",
       "      <td>2.10</td>\n",
       "      <td>57482.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>952</th>\n",
       "      <td>953.0</td>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED RETROSPOT</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10/07/2021</td>\n",
       "      <td>2.10</td>\n",
       "      <td>88333.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     InvoiceNo ItemCode   Most popular item of the day  Quantity        Date  \\\n",
       "8          9.0    22632      HAND WARMER RED POLKA DOT       6.0  09/12/2018   \n",
       "47        48.0    22632      HAND WARMER RED POLKA DOT       6.0  17/01/2019   \n",
       "84        85.0    22632      HAND WARMER RED POLKA DOT       6.0  23/02/2019   \n",
       "214      215.0    22962          JAM JAR WITH PINK LID      48.0  03/07/2019   \n",
       "257      258.0    22632      HAND WARMER RED RETROSPOT      96.0  15/08/2019   \n",
       "304      305.0    22632      HAND WARMER RED RETROSPOT      12.0  01/10/2019   \n",
       "315      316.0    22632      HAND WARMER RED POLKA DOT       6.0  12/10/2019   \n",
       "433      434.0    22632      HAND WARMER RED POLKA DOT       6.0  07/02/2020   \n",
       "664      665.0    22632      HAND WARMER RED RETROSPOT       3.0  25/09/2020   \n",
       "704      705.0    22632      HAND WARMER RED RETROSPOT      12.0  04/11/2020   \n",
       "731      732.0    22059  CERAMIC STRAWBERRY DESIGN MUG      48.0  01/12/2020   \n",
       "879      880.0    22632      HAND WARMER RED RETROSPOT      12.0  28/04/2021   \n",
       "952      953.0    22632      HAND WARMER RED RETROSPOT       4.0  10/07/2021   \n",
       "\n",
       "     UnitPrice CustomerID  \n",
       "8         1.85    90129.0  \n",
       "47        1.85    34900.0  \n",
       "84        1.85    22672.0  \n",
       "214       0.72    70024.0  \n",
       "257       1.85    45538.0  \n",
       "304       2.10    53809.0  \n",
       "315       1.85    94797.0  \n",
       "433       1.85    37705.0  \n",
       "664       2.10    70973.0  \n",
       "704       2.10    81281.0  \n",
       "731       1.25    46523.0  \n",
       "879       2.10    57482.0  \n",
       "952       2.10    88333.0  "
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We display the results in a dataframe\n",
    "\n",
    "filtered_data = df_retail_list[df_retail_list['ItemCode'].isin(['22632', '22962', '22059'])]\n",
    "filtered_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "da3da0e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#We create a dataframe with the probability of buying the recommended items\n",
    "\n",
    "prob_df = pd.DataFrame(list(recommendation_probabilities.items()), columns = ['ItemCode', 'Probability']) #Creating the likelihood of buying the recommendations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "4ccedc5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "prob_df[\"ItemCode\"] = prob_df[\"ItemCode\"].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "0ad43e46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ItemCode</th>\n",
       "      <th>Most popular item of the day</th>\n",
       "      <th>Probability</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED POLKA DOT</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22632</td>\n",
       "      <td>HAND WARMER RED RETROSPOT</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22962</td>\n",
       "      <td>JAM JAR WITH PINK LID</td>\n",
       "      <td>2.611411e-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22059</td>\n",
       "      <td>CERAMIC STRAWBERRY DESIGN MUG</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ItemCode   Most popular item of the day   Probability\n",
       "0    22632      HAND WARMER RED POLKA DOT  1.000000e+00\n",
       "1    22632      HAND WARMER RED RETROSPOT  1.000000e+00\n",
       "2    22962          JAM JAR WITH PINK LID  2.611411e-14\n",
       "3    22059  CERAMIC STRAWBERRY DESIGN MUG  0.000000e+00"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_result_df = pd.merge(filtered_data[['ItemCode', 'Most popular item of the day']].drop_duplicates(), prob_df, on = 'ItemCode')\n",
    "final_result_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b38e2a6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "427e49b0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
